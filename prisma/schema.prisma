// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Core User Management
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String   // Added for authentication
  name            String?
  avatar          String?
  role            UserRole @default(USER)
  subscription    Subscription?
  apiKey          String?
  isActive        Boolean  @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  posts           Post[]
  sessions        Session[]
  projects        Project[]
  analyses        Analysis[]
  conversations   Conversation[]
  uploads         Upload[]
  // Business Solutions Relations
  contractAnalyses ContractAnalysis[]
  localizationAnalyses LocalizationAnalysis[]
  customerBehaviorAnalyses CustomerBehaviorAnalysis[]
  complianceMonitoring ComplianceMonitoring[]
  learningPaths   LearningPath[]
  
  @@map("users")
}

// Enhanced Authentication & Sessions
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Security Settings for PIN Authentication
model SecuritySettings {
  id        String   @id @default("main")
  pin_hash  String
  salt      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("security_settings")
}

// Subscription Management
model Subscription {
  id              String            @id @default(cuid())
  userId          String            @unique
  plan            SubscriptionPlan
  status          SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd Boolean           @default(false)
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  usage           SubscriptionUsage[]
  
  @@map("subscriptions")
}

model SubscriptionUsage {
  id             String   @id @default(cuid())
  subscriptionId String
  metric         String
  value          Int
  period         String   // "daily", "monthly", "yearly"
  createdAt      DateTime @default(now())
  
  // Relations
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@unique([subscriptionId, metric, period])
  @@map("subscription_usage")
}

// Project Management
model Project {
  id          String      @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  userId      String
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  analyses    Analysis[]
  uploads     Upload[]
  // Business Solutions Relations
  contractAnalyses ContractAnalysis[]
  localizationAnalyses LocalizationAnalysis[]
  customerBehaviorAnalyses CustomerBehaviorAnalysis[]
  complianceMonitoring ComplianceMonitoring[]
  learningPaths   LearningPath[]
  
  @@map("projects")
}

// AI Analysis & Processing
model Analysis {
  id            String           @id @default(cuid())
  type          AnalysisType
  input         String
  result        Json?
  confidence    Float?
  status        AnalysisStatus   @default(PENDING)
  userId        String
  projectId     String?
  model         String?
  processingTime Int?
  metadata      Json?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relations
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  project       Project?         @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("analyses")
}

// Conversations & Chat
model Conversation {
  id        String   @id @default(cuid())
  title     String?
  userId    String
  isActive  Boolean  @default(true)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  
  @@map("conversations")
}

model Message {
  id            String      @id @default(cuid())
  conversationId String
  role          MessageRole
  content       String
  metadata      Json?
  createdAt     DateTime    @default(now())
  
  // Relations
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

// File Upload & Management
model Upload {
  id          String      @id @default(cuid())
  filename    String
  originalName String
  path        String
  size        Int
  mimeType    String
  status      UploadStatus @default(PENDING)
  userId      String
  projectId   String?
  metadata    Json?
  processedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?    @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("uploads")
}

// Enhanced Blog/Content Management
model Post {
  id          String   @id @default(cuid())
  title       String
  content     String?
  excerpt     String?
  slug        String   @unique
  published   Boolean  @default(false)
  authorId    String
  featured    Boolean  @default(false)
  metadata    Json?
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("posts")
}

// Business Solution Models
// ContractWise AI Models
model ContractAnalysis {
  id              String               @id @default(cuid())
  userId          String
  projectId       String?
  contractTitle   String
  contractType    ContractType
  fileUrl         String?
  extractedText   String?
  riskAssessment  Json?
  clauses         Json?
  plainLanguage   Json?
  complianceCheck Json?
  recommendations Json?
  confidence      Float?
  processingTime  Int?
  status          ContractAnalysisStatus @default(PENDING)
  metadata        Json?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  
  // Relations
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?             @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("contract_analyses")
}

// GlobalFit AI Models
model LocalizationAnalysis {
  id              String                   @id @default(cuid())
  userId          String
  projectId       String?
  productName     String
  targetMarket    String
  productImages   Json?                    // URLs to product images (stored as JSON array)
  productDesc     String?
  culturalAnalysis Json?
  visualAdaptation Json?
  marketStrategy  Json?
  complianceCheck Json?
  competitorAnalysis Json?
  confidence      Float?
  processingTime  Int?
  status          LocalizationStatus @default(PENDING)
  metadata        Json?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  
  // Relations
  user            User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?                 @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("localization_analyses")
}

// BehaviorPredict AI Models
model CustomerBehaviorAnalysis {
  id              String                     @id @default(cuid())
  userId          String
  projectId       String?
  customerSegment String?
  dataSource      Json?                      // CRM, email, social media, etc. (stored as JSON array)
  behaviorPrediction Json?
  sentimentAnalysis Json?
  journeyMapping  Json?
  recommendations Json?
  conversionProbability Float?
  churnRisk       Float?
  confidence      Float?
  processingTime  Int?
  status          BehaviorAnalysisStatus @default(PENDING)
  metadata        Json?
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  
  // Relations
  user            User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?                   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("customer_behavior_analyses")
}

// ComplianceGuard AI Models
model ComplianceMonitoring {
  id              String                   @id @default(cuid())
  userId          String
  projectId       String?
  businessType    String
  jurisdiction    String
  regulations     Json?                    // Tracked regulations
  riskAssessment  Json?
  documentReviews Json?
  actionPlan      Json?
  auditPreparation Json?
  trainingMaterials Json?
  nextReviewDate  DateTime?
  confidence      Float?
  processingTime  Int?
  status          ComplianceStatus @default(PENDING)
  metadata        Json?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  
  // Relations
  user            User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?                 @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("compliance_monitoring")
}

// SkillPath AI Models
model LearningPath {
  id              String                   @id @default(cuid())
  userId          String
  projectId       String?
  userProfile     Json?                    // Skills, experience, goals
  skillAssessment Json?
  learningStyle   Json?
  generatedPath   Json?
  progressTracking Json?
  certifications Json?
  recommendations Json?
  estimatedCompletion DateTime?
  confidence      Float?
  processingTime  Int?
  status          LearningPathStatus @default(PENDING)
  metadata        Json?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  
  // Relations
  user            User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?                 @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("learning_paths")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
  DEVELOPER
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  SUSPENDED
}

enum AnalysisType {
  TEXT_ANALYSIS
  IMAGE_ANALYSIS
  CODE_ANALYSIS
  DATA_ANALYSIS
  SENTIMENT_ANALYSIS
  CONTENT_OPTIMIZATION
  SEO_ANALYSIS
  MULTIMODAL_ANALYSIS
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum UploadStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  DELETED
}

// Business Solution Enums
enum ContractType {
  EMPLOYMENT
  SERVICE_AGREEMENT
  NDA
  PARTNERSHIP
  SALES_CONTRACT
  LEASE_AGREEMENT
  LICENSE_AGREEMENT
  FRANCHISE
  MERGER_ACQUISITION
  OTHER
}

enum ContractAnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REVIEW_REQUIRED
}

enum LocalizationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REVIEW_REQUIRED
}

enum BehaviorAnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  INSUFFICIENT_DATA
}

enum ComplianceStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REVIEW_REQUIRED
  URGENT_ATTENTION
}

enum LearningPathStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  IN_PROGRESS
  ON_HOLD
}