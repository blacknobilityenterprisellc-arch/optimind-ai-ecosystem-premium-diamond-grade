// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Multi-Tenant Architecture
model Tenant {
  id              String            @id @default(cuid())
  name            String            @unique
  slug            String            @unique
  domain          String?
  logo            String?
  branding        Json?             // Branding configuration
  settings        Json?             // Tenant-specific settings
  plan            TenantPlan        @default(FREE)
  status          TenantStatus      @default(ACTIVE)
  maxUsers        Int               @default(10)
  maxProjects     Int               @default(5)
  maxStorage      Int               @default(1024) // MB
  features        Json?             // Enabled features
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  users           User[]
  projects        Project[]
  subscriptions   Subscription[]
  settings        TenantSetting[]
  auditLogs       TenantAuditLog[]
  
  @@map("tenants")
}

model TenantSetting {
  id              String            @id @default(cuid())
  tenantId        String
  key             String
  value           Json
  category        SettingCategory   @default(GENERAL)
  isSystem        Boolean           @default(false)
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, key])
  @@map("tenant_settings")
}

model TenantAuditLog {
  id              String            @id @default(cuid())
  tenantId        String
  userId          String?
  action          String
  resourceType    String?
  resourceId      String?
  oldValues       Json?
  newValues       Json?
  metadata        Json?
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime          @default(now())
  
  // Relations
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([tenantId])
  @@index([action])
  @@index([timestamp])
  @@map("tenant_audit_logs")
}

model TenantUser {
  id              String            @id @default(cuid())
  tenantId        String
  userId          String
  role            TenantUserRole    @default(MEMBER)
  status          TenantUserStatus  @default(ACTIVE)
  invitedBy       String?
  invitedAt       DateTime          @default(now())
  joinedAt        DateTime?
  permissions     Json?             // Custom permissions
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, userId])
  @@map("tenant_users")
}

// Core User Management
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  password        String   // Added for authentication
  name            String?
  avatar          String?
  role            UserRole @default(USER)
  subscription    Subscription?
  apiKey          String?
  isActive        Boolean  @default(true)
  lastLoginAt     DateTime?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  posts           Post[]
  sessions        Session[]
  projects        Project[]
  analyses        Analysis[]
  conversations   Conversation[]
  uploads         Upload[]
  // Business Solutions Relations
  contractAnalyses ContractAnalysis[]
  localizationAnalyses LocalizationAnalysis[]
  customerBehaviorAnalyses CustomerBehaviorAnalysis[]
  complianceMonitoring ComplianceMonitoring[]
  learningPaths   LearningPath[]
  // Zero-Trust Security Relations
  accessControls  AccessControl[]
  auditLogs       AuditLog[]
  securityAuditLogs AccessAuditLog[]
  // Enhanced Analytics Relations
  predictions     Prediction[]
  // Enhanced Relations
  dashboards      Dashboard[]
  dashboardShares DashboardShare[]
  workflows       Workflow[]
  workflowExecutions WorkflowExecution[]
  searchQueries   SearchQuery[]
  apiUsage        ApiUsage[]
  apiKeys         ApiKey[]
  // Multi-Tenant Relations
  tenantUsers     TenantUser[]
  // Enhanced RBAC Relations
  userRoles       UserRoleAssignment[]
  // AI Model Relations
  modelPreferences UserModelPreference[]
  modelUsageLogs  AIModelUsageLog[]
  modelComparisons AIModelComparison[]
  
  @@map("users")
}

// Enhanced Authentication & Sessions
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Security Settings for PIN Authentication
model SecuritySettings {
  id        String   @id @default("main")
  pin_hash  String
  salt      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  @@map("security_settings")
}

// Subscription Management
model Subscription {
  id              String            @id @default(cuid())
  userId          String
  tenantId        String?
  plan            SubscriptionPlan
  status          SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd Boolean           @default(false)
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant          Tenant?           @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  usage           SubscriptionUsage[]
  usageMetrics    UsageMetric[]
  
  @@unique([userId, tenantId])
  @@map("subscriptions")
}

model SubscriptionUsage {
  id             String   @id @default(cuid())
  subscriptionId String
  metric         String
  value          Int
  period         String   // "daily", "monthly", "yearly"
  createdAt      DateTime @default(now())
  
  // Relations
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@unique([subscriptionId, metric, period])
  @@map("subscription_usage")
}

// Project Management
model Project {
  id          String      @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  userId      String
  tenantId    String?
  metadata    Json?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant      Tenant?     @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  analyses    Analysis[]
  uploads     Upload[]
  // Business Solutions Relations
  contractAnalyses ContractAnalysis[]
  localizationAnalyses LocalizationAnalysis[]
  customerBehaviorAnalyses CustomerBehaviorAnalysis[]
  complianceMonitoring ComplianceMonitoring[]
  learningPaths   LearningPath[]
  
  @@map("projects")
}

// AI Analysis & Processing
model Analysis {
  id            String           @id @default(cuid())
  type          AnalysisType
  input         String
  result        Json?
  confidence    Float?
  status        AnalysisStatus   @default(PENDING)
  userId        String
  projectId     String?
  model         String?
  processingTime Int?
  metadata      Json?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  
  // Relations
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  project       Project?         @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("analyses")
}

// Conversations & Chat
model Conversation {
  id        String   @id @default(cuid())
  title     String?
  userId    String
  isActive  Boolean  @default(true)
  metadata  Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  
  @@map("conversations")
}

model Message {
  id            String      @id @default(cuid())
  conversationId String
  role          MessageRole
  content       String
  metadata      Json?
  createdAt     DateTime    @default(now())
  
  // Relations
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

// File Upload & Management
model Upload {
  id          String      @id @default(cuid())
  filename    String
  originalName String
  path        String
  size        Int
  mimeType    String
  status      UploadStatus @default(PENDING)
  userId      String
  projectId   String?
  metadata    Json?
  processedAt DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?    @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("uploads")
}

// Enhanced Blog/Content Management
model Post {
  id          String   @id @default(cuid())
  title       String
  content     String?
  excerpt     String?
  slug        String   @unique
  published   Boolean  @default(false)
  authorId    String
  featured    Boolean  @default(false)
  metadata    Json?
  publishedAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("posts")
}

// Business Solution Models
// ContractWise AI Models
model ContractAnalysis {
  id              String               @id @default(cuid())
  userId          String
  projectId       String?
  contractTitle   String
  contractType    ContractType
  fileUrl         String?
  extractedText   String?
  riskAssessment  Json?
  clauses         Json?
  plainLanguage   Json?
  complianceCheck Json?
  recommendations Json?
  confidence      Float?
  processingTime  Int?
  status          ContractAnalysisStatus @default(PENDING)
  metadata        Json?
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  
  // Relations
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?             @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("contract_analyses")
}

// GlobalFit AI Models
model LocalizationAnalysis {
  id              String                   @id @default(cuid())
  userId          String
  projectId       String?
  productName     String
  targetMarket    String
  productImages   Json?                    // URLs to product images (stored as JSON array)
  productDesc     String?
  culturalAnalysis Json?
  visualAdaptation Json?
  marketStrategy  Json?
  complianceCheck Json?
  competitorAnalysis Json?
  confidence      Float?
  processingTime  Int?
  status          LocalizationStatus @default(PENDING)
  metadata        Json?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  
  // Relations
  user            User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?                 @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("localization_analyses")
}

// BehaviorPredict AI Models
model CustomerBehaviorAnalysis {
  id              String                     @id @default(cuid())
  userId          String
  projectId       String?
  customerSegment String?
  dataSource      Json?                      // CRM, email, social media, etc. (stored as JSON array)
  behaviorPrediction Json?
  sentimentAnalysis Json?
  journeyMapping  Json?
  recommendations Json?
  conversionProbability Float?
  churnRisk       Float?
  confidence      Float?
  processingTime  Int?
  status          BehaviorAnalysisStatus @default(PENDING)
  metadata        Json?
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
  
  // Relations
  user            User                       @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?                   @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("customer_behavior_analyses")
}

// ComplianceGuard AI Models
model ComplianceMonitoring {
  id              String                   @id @default(cuid())
  userId          String
  projectId       String?
  businessType    String
  jurisdiction    String
  regulations     Json?                    // Tracked regulations
  riskAssessment  Json?
  documentReviews Json?
  actionPlan      Json?
  auditPreparation Json?
  trainingMaterials Json?
  nextReviewDate  DateTime?
  confidence      Float?
  processingTime  Int?
  status          ComplianceStatus @default(PENDING)
  metadata        Json?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  
  // Relations
  user            User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?                 @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("compliance_monitoring")
}

// SkillPath AI Models
model LearningPath {
  id              String                   @id @default(cuid())
  userId          String
  projectId       String?
  userProfile     Json?                    // Skills, experience, goals
  skillAssessment Json?
  learningStyle   Json?
  generatedPath   Json?
  progressTracking Json?
  certifications Json?
  recommendations Json?
  estimatedCompletion DateTime?
  confidence      Float?
  processingTime  Int?
  status          LearningPathStatus @default(PENDING)
  metadata        Json?
  createdAt       DateTime                 @default(now())
  updatedAt       DateTime                 @updatedAt
  
  // Relations
  user            User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  project         Project?                 @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("learning_paths")
}

// Enums
enum UserRole {
  USER
  ADMIN
  MODERATOR
  DEVELOPER
}

// Multi-Tenant Enums
enum TenantPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
  CUSTOM
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  PENDING
  DELETED
}

enum TenantUserRole {
  OWNER
  ADMIN
  MEMBER
  GUEST
}

enum TenantUserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
  DELETED
}

enum SettingCategory {
  GENERAL
  SECURITY
  BILLING
  FEATURES
  INTEGRATIONS
  BRANDING
  NOTIFICATIONS
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum LearningPathStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  IN_PROGRESS
  ON_HOLD
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  ARCHIVED
  SUSPENDED
}

enum AnalysisType {
  TEXT_ANALYSIS
  IMAGE_ANALYSIS
  CODE_ANALYSIS
  DATA_ANALYSIS
  SENTIMENT_ANALYSIS
  CONTENT_OPTIMIZATION
  SEO_ANALYSIS
  MULTIMODAL_ANALYSIS
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum UploadStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  DELETED
}

// Business Solution Enums
enum ContractType {
  EMPLOYMENT
  SERVICE_AGREEMENT
  NDA
  PARTNERSHIP
  SALES_CONTRACT
  LEASE_AGREEMENT
  LICENSE_AGREEMENT
  FRANCHISE
  MERGER_ACQUISITION
  OTHER
}

enum ContractAnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REVIEW_REQUIRED
}

enum LocalizationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REVIEW_REQUIRED
}

enum BehaviorAnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  INSUFFICIENT_DATA
}

enum ComplianceStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  REVIEW_REQUIRED
  URGENT_ATTENTION
}

// Zero-Trust Security Models
model AccessControl {
  id              String              @id @default(cuid())
  userId          String
  resourceType    String              // 'project', 'analysis', 'document', 'api', etc.
  resourceId      String
  permission      AccessPermission
  grantedBy       String?
  grantedAt       DateTime            @default(now())
  expiresAt       DateTime?
  conditions      Json?               // Dynamic conditions for access
  auditLog        AccessAuditLog[]
  
  // Relations
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, resourceType, resourceId])
  @@index([userId])
  @@index([resourceType, resourceId])
  @@map("access_controls")
}

model AccessAuditLog {
  id              String              @id @default(cuid())
  accessControlId String
  userId          String
  action          AuditAction         // 'granted', 'denied', 'revoked', 'accessed'
  resourceType    String
  resourceId      String
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime            @default(now())
  details         Json?
  
  // Relations
  accessControl   AccessControl       @relation(fields: [accessControlId], references: [id], onDelete: Cascade)
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("access_audit_logs")
}

model SecurityPolicy {
  id              String              @id @default(cuid())
  name            String              @unique
  description     String?
  type            PolicyType          @default(ACCESS_CONTROL)
  rules           Json                // Policy rules and conditions
  priority        Int                 @default(0)
  isActive        Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  assignments      PolicyAssignment[]
  
  @@index([type])
  @@index([isActive])
  @@map("security_policies")
}

model PolicyAssignment {
  id              String              @id @default(cuid())
  policyId        String
  userId          String?
  roleId          String?
  conditions      Json?
  assignedAt      DateTime            @default(now())
  assignedBy      String?
  
  // Relations
  policy          SecurityPolicy      @relation(fields: [policyId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([roleId])
  @@map("policy_assignments")
}

model SecurityIncident {
  id              String              @id @default(cuid())
  type            IncidentType
  severity        IncidentSeverity    @default(MEDIUM)
  title           String
  description     String
  affectedUsers   Json?               // Array of affected user IDs
  affectedResources Json?             // Array of affected resource IDs
  status          IncidentStatus      @default(OPEN)
  assignedTo      String?
  resolution      Json?
  metadata        Json?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([type])
  @@index([severity])
  @@index([status])
  @@index([createdAt])
  @@map("security_incidents")
}

model SecurityMetrics {
  id              String              @id @default(cuid())
  metricType      MetricType
  value           Float
  unit            String?
  timestamp       DateTime            @default(now())
  metadata        Json?
  
  @@index([metricType])
  @@index([timestamp])
  @@map("security_metrics")
}

// Enhanced Analytics Models for Predictive Insights
model PredictiveModel {
  id              String              @id @default(cuid())
  name            String
  type            ModelType           // 'regression', 'classification', 'clustering', 'neural_network'
  version         String
  description     String?
  trainingData    Json                // Training data configuration
  hyperparameters Json?
  performance     Json?               // Model performance metrics
  status          ModelStatus         @default(TRAINING)
  accuracy        Float?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  predictions     Prediction[]
  trainingHistory ModelTrainingHistory[]
  
  @@index([type])
  @@index([status])
  @@map("predictive_models")
}

model Prediction {
  id              String              @id @default(cuid())
  modelId         String
  inputData       Json
  outputData      Json
  confidence      Float
  predictionType  PredictionType
  userId          String?
  projectId       String?
  metadata        Json?
  createdAt       DateTime            @default(now())
  
  // Relations
  model           PredictiveModel     @relation(fields: [modelId], references: [id], onDelete: Cascade)
  user            User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([modelId])
  @@index([predictionType])
  @@index([userId])
  @@index([createdAt])
  @@map("predictions")
}

model ModelTrainingHistory {
  id              String              @id @default(cuid())
  modelId         String
  epoch           Int
  loss            Float?
  accuracy        Float?
  validationLoss  Float?
  validationAccuracy Float?
  learningRate    Float?
  metadata        Json?
  timestamp       DateTime            @default(now())
  
  // Relations
  model           PredictiveModel     @relation(fields: [modelId], references: [id], onDelete: Cascade)
  
  @@index([modelId])
  @@index([epoch])
  @@map("model_training_history")
}

// Enhanced Performance Monitoring
model PerformanceLog {
  id              String              @id @default(cuid())
  endpoint        String
  method          String
  responseTime    Int                 // in milliseconds
  statusCode      Int
  userId          String?
  ipAddress       String?
  userAgent       String?
  error           String?
  metadata        Json?
  timestamp       DateTime            @default(now())
  
  @@index([endpoint])
  @@index([method])
  @@index([responseTime])
  @@index([statusCode])
  @@index([timestamp])
  @@map("performance_logs")
}

model SystemHealth {
  id              String              @id @default(cuid())
  metric          String
  value           Float
  threshold       Float?
  status          HealthStatus        @default(HEALTHY)
  component       String?
  timestamp       DateTime            @default(now())
  metadata        Json?
  
  @@index([metric])
  @@index([status])
  @@index([component])
  @@index([timestamp])
  @@map("system_health")
}

// Enhanced User Activity Tracking
model UserActivity {
  id              String              @id @default(cuid())
  userId          String
  action          String
  resourceType    String?
  resourceId      String?
  ipAddress       String?
  userAgent       String?
  metadata        Json?
  timestamp       DateTime            @default(now())
  
  @@index([userId])
  @@index([action])
  @@index([timestamp])
  @@map("user_activities")
}

// Enhanced Analytics and Reporting
model AnalyticsReport {
  id              String              @id @default(cuid())
  name            String
  type            ReportType
  configuration   Json                // Report configuration
  schedule        Json?               // Scheduling configuration
  lastGenerated   DateTime?
  nextRun        DateTime?
  isActive        Boolean             @default(true)
  createdBy       String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  generations     ReportGeneration[]
  
  @@index([type])
  @@index([isActive])
  @@map("analytics_reports")
}

model ReportGeneration {
  id              String              @id @default(cuid())
  reportId        String
  generatedBy     String
  status          GenerationStatus    @default(PENDING)
  filePath        String?
  fileSize        Int?
  recordCount     Int?
  error           String?
  generatedAt     DateTime?
  completedAt     DateTime?
  
  // Relations
  report          AnalyticsReport     @relation(fields: [reportId], references: [id], onDelete: Cascade)
  
  @@index([reportId])
  @@index([status])
  @@index([generatedAt])
  @@map("report_generations")
}

// Enhanced Security Settings
model SecurityConfiguration {
  id              String              @id @default(cuid())
  key             String              @unique
  value           Json
  category        String              // 'authentication', 'authorization', 'encryption', etc.
  isSystem        Boolean             @default(false)
  description     String?
  lastModifiedBy  String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([category])
  @@index([key])
  @@map("security_configurations")
}

model SecurityEvent {
  id              String              @id @default(cuid())
  eventType       SecurityEventType
  severity        EventSeverity       @default(MEDIUM)
  title           String
  description     String
  source          String?
  userId          String?
  sessionId       String?
  ipAddress       String?
  metadata        Json?
  createdAt       DateTime            @default(now())
  
  @@index([eventType])
  @@index([severity])
  @@index([userId])
  @@index([createdAt])
  @@map("security_events")
}

// Enhanced Subscription and Usage Tracking
model UsageMetric {
  id              String              @id @default(cuid())
  subscriptionId  String
  metricName      String
  metricValue     Int
  period          String              // 'hourly', 'daily', 'weekly', 'monthly'
  timestamp       DateTime            @default(now())
  metadata        Json?
  
  // Relations
  subscription    Subscription        @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@unique([subscriptionId, metricName, period, timestamp])
  @@index([subscriptionId])
  @@index([metricName])
  @@index([period])
  @@index([timestamp])
  @@map("usage_metrics")
}

model RateLimit {
  id              String              @id @default(cuid())
  key             String              @unique
  windowSize      Int                 // in seconds
  maxRequests     Int
  currentCount    Int                 @default(0)
  resetAt         DateTime
  isActive        Boolean             @default(true)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([key])
  @@index([resetAt])
  @@map("rate_limits")
}

// Enhanced Communication and Notification
model Notification {
  id              String              @id @default(cuid())
  userId          String
  type            NotificationType
  title           String
  message         String
  status          NotificationStatus   @default(UNREAD)
  priority        NotificationPriority @default(MEDIUM)
  metadata        Json?
  scheduledAt     DateTime?
  sentAt          DateTime?
  readAt          DateTime?
  createdAt       DateTime            @default(now())
  
  @@index([userId])
  @@index([type])
  @@index([status])
  @@index([priority])
  @@index([scheduledAt])
  @@map("notifications")
}

model NotificationTemplate {
  id              String              @id @default(cuid())
  name            String              @unique
  type            NotificationType
  subject         String
  content         String
  variables       Json?               // Template variables
  isActive        Boolean             @default(true)
  createdBy       String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([type])
  @@index([isActive])
  @@map("notification_templates")
}

// Enhanced File and Document Management
model Document {
  id              String              @id @default(cuid())
  name            String
  type            DocumentType
  category        String?
  version         String              @default("1.0")
  content         String?
  metadata        Json?
  tags            Json?               // Array of tags
  accessLevel     AccessLevel         @default(PUBLIC)
  createdBy       String
  updatedBy       String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  versions        DocumentVersion[]
  accessControls  DocumentAccess[]
  
  @@index([type])
  @@index([category])
  @@index([accessLevel])
  @@index([createdBy])
  @@map("documents")
}

model DocumentVersion {
  id              String              @id @default(cuid())
  documentId      String
  version         String
  content         String?
  changes         Json?
  changelog       String?
  createdBy       String
  createdAt       DateTime            @default(now())
  
  // Relations
  document        Document            @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@unique([documentId, version])
  @@index([documentId])
  @@map("document_versions")
}

model DocumentAccess {
  id              String              @id @default(cuid())
  documentId      String
  userId          String
  permission      DocumentPermission
  grantedBy       String
  grantedAt       DateTime            @default(now())
  expiresAt       DateTime?
  
  // Relations
  document        Document            @relation(fields: [documentId], references: [id], onDelete: Cascade)
  
  @@unique([documentId, userId])
  @@index([documentId])
  @@index([userId])
  @@map("document_access")
}

// Enhanced Integration and API Management
model ApiKey {
  id              String              @id @default(cuid())
  name            String
  key             String              @unique
  secret          String
  userId          String
  permissions     Json?
  rateLimit       Int?                // requests per minute
  isActive        Boolean             @default(true)
  lastUsedAt      DateTime?
  expiresAt       DateTime?
  createdBy       String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  usage           ApiUsage[]
  
  @@index([userId])
  @@index([isActive])
  @@index([expiresAt])
  @@map("api_keys")
}

model ApiUsage {
  id              String              @id @default(cuid())
  apiKeyId        String
  endpoint        String
  method          String
  responseTime    Int
  statusCode      Int
  requestSize     Int?
  responseSize    Int?
  userId          String?
  ipAddress       String?
  userAgent       String?
  error           String?
  timestamp       DateTime            @default(now())
  
  // Relations
  apiKey          ApiKey              @relation(fields: [apiKeyId], references: [id], onDelete: Cascade)
  user            User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([apiKeyId])
  @@index([endpoint])
  @@index([method])
  @@index([timestamp])
  @@map("api_usage")
}

// Enhanced Machine Learning and AI Features
model MLModel {
  id              String              @id @default(cuid())
  name            String
  type            MLModelType
  version         String
  description     String?
  framework       String              // 'tensorflow', 'pytorch', 'sklearn', etc.
  modelPath       String?
  config          Json?
  performance     Json?
  status          MLModelStatus       @default(TRAINING)
  accuracy        Float?
  loss            Float?
  trainingTime    Int?                // in seconds
  datasetSize     Int?
  createdBy       String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  deployments     MLDeployment[]
  evaluations     MLEvaluation[]
  
  @@index([type])
  @@index([status])
  @@index([createdBy])
  @@map("ml_models")
}

model MLDeployment {
  id              String              @id @default(cuid())
  modelId         String
  version         String
  environment     String              // 'development', 'staging', 'production'
  endpoint        String?
  status          DeploymentStatus    @default(DEPLOYING)
  deployedAt      DateTime?
  metrics         Json?
  createdBy       String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  model           MLModel             @relation(fields: [modelId], references: [id], onDelete: Cascade)
  
  @@index([modelId])
  @@index([environment])
  @@index([status])
  @@map("ml_deployments")
}

model MLEvaluation {
  id              String              @id @default(cuid())
  modelId         String
  datasetName     String
  accuracy        Float?
  precision       Float?
  recall          Float?
  f1Score         Float?
  confusionMatrix Json?
  evaluationTime  Int?                // in seconds
  evaluatedBy     String
  evaluatedAt     DateTime            @default(now())
  
  // Relations
  model           MLModel             @relation(fields: [modelId], references: [id], onDelete: Cascade)
  
  @@index([modelId])
  @@index([evaluatedAt])
  @@map("ml_evaluations")
}

// Enhanced Business Intelligence
model Dashboard {
  id              String              @id @default(cuid())
  name            String
  description     String?
  type            DashboardType       @default(CUSTOM)
  configuration   Json                // Layout, widgets, filters
  isPublic        Boolean             @default(false)
  createdBy       String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  widgets         DashboardWidget[]
  shares          DashboardShare[]
  creator         User                @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@index([type])
  @@index([isPublic])
  @@index([createdBy])
  @@map("dashboards")
}

model DashboardWidget {
  id              String              @id @default(cuid())
  dashboardId     String
  type            WidgetType
  title           String
  configuration   Json                // Widget-specific config
  position        Json                // x, y, width, height
  dataSource      Json?               // Data source configuration
  refreshInterval Int?                // in seconds
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  dashboard       Dashboard           @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  
  @@index([dashboardId])
  @@index([type])
  @@map("dashboard_widgets")
}

model DashboardShare {
  id              String              @id @default(cuid())
  dashboardId     String
  userId          String
  permission      SharePermission     @default(VIEW)
  sharedBy        String
  sharedAt       DateTime            @default(now())
  expiresAt       DateTime?
  
  // Relations
  dashboard       Dashboard           @relation(fields: [dashboardId], references: [id], onDelete: Cascade)
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([dashboardId, userId])
  @@index([dashboardId])
  @@index([userId])
  @@map("dashboard_shares")
}

// Enhanced Workflow and Automation
model Workflow {
  id              String              @id @default(cuid())
  name            String
  description     String?
  type            WorkflowType        @default(MANUAL)
  status          WorkflowStatus      @default(DRAFT)
  trigger         Json?               // Trigger configuration
  steps           Json                // Workflow steps configuration
  variables       Json?               // Workflow variables
  isActive        Boolean             @default(true)
  createdBy       String
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  // Relations
  executions      WorkflowExecution[]
  creator         User                @relation(fields: [createdBy], references: [id], onDelete: Cascade)
  
  @@index([type])
  @@index([status])
  @@index([isActive])
  @@index([createdBy])
  @@map("workflows")
}

model WorkflowExecution {
  id              String              @id @default(cuid())
  workflowId      String
  executorId      String?
  status          ExecutionStatus     @default(RUNNING)
  triggerData     Json?
  input           Json?
  output          Json?
  error           String?
  startedAt       DateTime            @default(now())
  completedAt     DateTime?
  executionTime   Int?                // in seconds
  
  // Relations
  workflow        Workflow            @relation(fields: [workflowId], references: [id], onDelete: Cascade)
  executor        User?               @relation(fields: [executorId], references: [id], onDelete: SetNull)
  
  @@index([workflowId])
  @@index([status])
  @@index([startedAt])
  @@map("workflow_executions")
}

// Enhanced Audit and Compliance
model AuditLog {
  id              String              @id @default(cuid())
  action          String
  resourceType    String
  resourceId      String
  userId          String?
  sessionId       String?
  changes         Json?               // Before/after values
  metadata        Json?
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime            @default(now())
  
  // Relations
  user            User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([action])
  @@index([resourceType])
  @@index([userId])
  @@index([timestamp])
  @@map("audit_logs")
}

model ComplianceCheck {
  id              String              @id @default(cuid())
  framework       String              // 'SOC2', 'GDPR', 'HIPAA', 'ISO27001', etc.
  control         String
  status          ComplianceStatus    @default(PENDING)
  evidence        Json?
  findings        Json?
  lastChecked     DateTime?
  nextCheck       DateTime?
  assignedTo      String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@index([framework])
  @@index([status])
  @@index([lastChecked])
  @@index([nextCheck])
  @@map("compliance_checks")
}

model ComplianceReport {
  id              String              @id @default(cuid())
  framework       String
  period          String              // 'monthly', 'quarterly', 'annual'
  score           Float               // Compliance score 0-100
  findings        Json?
  recommendations Json?
  generatedBy     String
  generatedAt     DateTime            @default(now())
  
  @@index([framework])
  @@index([period])
  @@index([generatedAt])
  @@map("compliance_reports")
}

// Enhanced Search and Indexing
model SearchIndex {
  id              String              @id @default(cuid())
  entityType      String              // 'user', 'project', 'document', 'analysis', etc.
  entityId        String
  content         String
  metadata        Json?
  tags            Json?               // Search tags
  relevance       Float               @default(1.0)
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  
  @@unique([entityType, entityId])
  @@index([entityType])
  @@index([createdAt])
  @@map("search_indices")
}

model SearchQuery {
  id              String              @id @default(cuid())
  query           String
  userId          String?
  filters         Json?
  resultsCount    Int                 @default(0)
  executionTime   Int                 // in milliseconds
  timestamp       DateTime            @default(now())
  
  // Relations
  user            User?               @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([timestamp])
  @@map("search_queries")
}

// Enhanced Cache and Performance
model CacheEntry {
  id              String              @id @default(cuid())
  key             String              @unique
  value           String
  type            CacheType           @default(GENERAL)
  ttl             Int                 // Time to live in seconds
  hits            Int                 @default(0)
  createdAt       DateTime            @default(now())
  expiresAt       DateTime
  
  @@index([type])
  @@index([expiresAt])
  @@map("cache_entries")
}

model PerformanceMetric {
  id              String              @id @default(cuid())
  metricName      String
  metricValue     Float
  unit            String?
  tags            Json?
  timestamp       DateTime            @default(now())
  
  @@index([metricName])
  @@index([timestamp])
  @@map("performance_metrics")
}

// Zero-Trust Security Enums
enum AccessPermission {
  READ
  WRITE
  EXECUTE
  DELETE
  ADMIN
  OWNER
}

enum AuditAction {
  GRANTED
  DENIED
  REVOKED
  ACCESSED
  MODIFIED
  DELETED
}

enum PolicyType {
  ACCESS_CONTROL
  DATA_PROTECTION
  SECURITY_POLICY
  COMPLIANCE
  AUDIT
}

enum IncidentType {
  SECURITY_BREACH
  UNAUTHORIZED_ACCESS
  DATA_LEAK
  MALWARE_DETECTION
  PHISHING_ATTEMPT
  DDOS_ATTACK
  BRUTE_FORCE
  POLICY_VIOLATION
}

enum IncidentSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum IncidentStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ESCALATED
}

enum MetricType {
  AUTHENTICATION_SUCCESS
  AUTHENTICATION_FAILURE
  AUTHORIZATION_SUCCESS
  AUTHORIZATION_FAILURE
  SECURITY_INCIDENTS
  THREAT_DETECTIONS
  VULNERABILITY_SCANS
  COMPLIANCE_SCORE
}

// Predictive Analytics Enums
enum ModelType {
  REGRESSION
  CLASSIFICATION
  CLUSTERING
  NEURAL_NETWORK
  ENSEMBLE
  TIME_SERIES
  NLP
  COMPUTER_VISION
}

enum ModelStatus {
  TRAINING
  TRAINED
  DEPLOYING
  DEPLOYED
  FAILED
  RETIRED
}

enum PredictionType {
  CLASSIFICATION
  REGRESSION
  CLUSTERING
  ANOMALY_DETECTION
  RECOMMENDATION
  FORECASTING
}

// Health and Performance Enums
enum HealthStatus {
  HEALTHY
  WARNING
  CRITICAL
  UNKNOWN
}

// Analytics and Reporting Enums
enum ReportType {
  PERFORMANCE
  SECURITY
  USAGE
  COMPLIANCE
  CUSTOM
  SCHEDULED
}

enum GenerationStatus {
  PENDING
  GENERATING
  COMPLETED
  FAILED
  CANCELLED
}

// Security Configuration Enums
enum SecurityEventType {
  LOGIN_SUCCESS
  LOGIN_FAILURE
  LOGOUT
  PASSWORD_CHANGE
  ACCOUNT_LOCKED
  PERMISSION_CHANGED
  DATA_ACCESS
  DATA_MODIFICATION
  SECURITY_POLICY_VIOLATION
}

enum EventSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

// Communication Enums
enum NotificationType {
  EMAIL
  SMS
  PUSH
  IN_APP
  WEBHOOK
  SLACK
  TEAMS
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
  DELETED
}

enum NotificationPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

// Document Management Enums
enum DocumentType {
  PDF
  DOC
  DOCX
  TXT
  MD
  HTML
  XML
  JSON
  CSV
  IMAGE
  VIDEO
  AUDIO
}

enum AccessLevel {
  PUBLIC
  INTERNAL
  RESTRICTED
  CONFIDENTIAL
  SECRET
  TOP_SECRET
}

enum DocumentPermission {
  VIEW
  EDIT
  DOWNLOAD
  SHARE
  DELETE
  ADMIN
}

// Machine Learning Enums
enum MLModelType {
  SUPERVISED
  UNSUPERVISED
  REINFORCEMENT
  DEEP_LEARNING
  TRANSFORMER
  CNN
  RNN
  GAN
}

enum MLModelStatus {
  TRAINING
  TRAINED
  VALIDATING
  DEPLOYED
  FAILED
  DEPRECATED
}

enum DeploymentStatus {
  DEPLOYING
  DEPLOYED
  FAILED
  ROLLING_BACK
  DEPRECATED
}

// Dashboard and Business Intelligence Enums
enum DashboardType {
  CUSTOM
  SECURITY
  PERFORMANCE
  ANALYTICS
  BUSINESS
  OPERATIONAL
}

enum WidgetType {
  CHART
  TABLE
  METRIC
  MAP
  TEXT
  IMAGE
  CUSTOM
}

enum SharePermission {
  VIEW
  EDIT
  ADMIN
}

// Workflow and Automation Enums
enum WorkflowType {
  MANUAL
  AUTOMATED
  SCHEDULED
  EVENT_TRIGGERED
  API_TRIGGERED
}

enum WorkflowStatus {
  DRAFT
  ACTIVE
  PAUSED
  ARCHIVED
  DEPRECATED
}

enum ExecutionStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
}

// Cache and Performance Enums
enum CacheType {
  GENERAL
  USER_DATA
  API_RESPONSE
  DATABASE_QUERY
  ML_PREDICTION
  SECURITY_POLICY
}

// Enhanced RBAC Models
model Permission {
  id              String            @id @default(cuid())
  name            String            @unique
  key             String            @unique
  description     String?
  category        PermissionCategory @default(GENERAL)
  resourceType    String?
  action          String?
  conditions      Json?             // Dynamic conditions for permission
  isActive        Boolean           @default(true)
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  rolePermissions RolePermission[]
  
  @@index([category])
  @@index([resourceType])
  @@map("permissions")
}

model Role {
  id              String        @id @default(cuid())
  name            String        @unique
  description     String?
  level           RoleLevel     @default(STANDARD)
  isSystem        Boolean       @default(false)
  permissions     Json?         // Legacy permissions array
  isActive        Boolean       @default(true)
  metadata        Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  userRoles       UserRoleAssignment[]
  rolePermissions RolePermission[]
  
  @@index([level])
  @@index([isActive])
  @@map("roles")
}

model UserRoleAssignment {
  id              String            @id @default(cuid())
  userId          String
  roleId          String
  tenantId        String?
  assignedBy      String?
  assignedAt      DateTime          @default(now())
  expiresAt       DateTime?
  conditions      Json?             // Dynamic conditions for role assignment
  isActive        Boolean           @default(true)
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  role            Role              @relation(fields: [roleId], references: [id], onDelete: Cascade)
  tenant          Tenant?           @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  
  @@unique([userId, roleId, tenantId])
  @@index([userId])
  @@index([roleId])
  @@index([tenantId])
  @@map("user_role_assignments")
}

model RolePermission {
  id              String            @id @default(cuid())
  roleId          String
  permissionId    String
  conditions      Json?             // Override default permission conditions
  grantedBy       String?
  grantedAt       DateTime          @default(now())
  expiresAt       DateTime?
  isActive        Boolean           @default(true)
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  role            Role              @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission      Permission        @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@index([roleId])
  @@index([permissionId])
  @@map("role_permissions")
}

model PermissionTemplate {
  id              String            @id @default(cuid())
  name            String            @unique
  description     String?
  category        TemplateCategory  @default(GENERAL)
  permissions     Json              // Array of permission keys
  isSystem        Boolean           @default(false)
  isActive        Boolean           @default(true)
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  roleTemplates   RoleTemplate[]
  
  @@index([category])
  @@index([isActive])
  @@map("permission_templates")
}

model RoleTemplate {
  id              String            @id @default(cuid())
  templateId      String
  roleId          String
  isActive        Boolean           @default(true)
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  template        PermissionTemplate @relation(fields: [templateId], references: [id], onDelete: Cascade)
  role            Role              @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([templateId, roleId])
  @@index([templateId])
  @@index([roleId])
  @@map("role_templates")
}

// Enhanced RBAC Enums
enum PermissionCategory {
  GENERAL
  USER_MANAGEMENT
  PROJECT_MANAGEMENT
  AI_SERVICES
  BILLING
  SECURITY
  ANALYTICS
  INTEGRATIONS
  SYSTEM
  TENANT_MANAGEMENT
}

enum RoleLevel {
  BASIC
  STANDARD
  ADVANCED
  ADMIN
  SUPER_ADMIN
  SYSTEM
}

enum TemplateCategory {
  GENERAL
  DEPARTMENT
  PROJECT
  TENANT
  SYSTEM
}

// AI Model Management Models
model AIModel {
  id              String            @id @default(cuid())
  name            String            @unique
  provider        AIProvider
  modelType       AIModelType
  version         String?
  description     String?
  capabilities    Json?             // Array of capabilities
  maxTokens       Int?
  costPerToken    Float?
  costPerMinute   Float?
  features        Json?             // Additional features
  config          Json?             // Model configuration
  isActive        Boolean           @default(true)
  isPremium       Boolean           @default(false)
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  userPreferences UserModelPreference[]
  tenantSettings  TenantModelSetting[]
  usageLogs       AIModelUsageLog[]
  
  @@index([provider])
  @@index([modelType])
  @@index([isActive])
  @@index([isPremium])
  @@map("ai_models")
}

model UserModelPreference {
  id              String            @id @default(cuid())
  userId          String
  modelId         String
  taskType        TaskType          @default(GENERAL)
  isDefault       Boolean           @default(false)
  priority        Int               @default(0)
  config          Json?             // User-specific configuration
  isActive        Boolean           @default(true)
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  model           AIModel           @relation(fields: [modelId], references: [id], onDelete: Cascade)
  
  @@unique([userId, modelId, taskType])
  @@index([userId])
  @@index([taskType])
  @@map("user_model_preferences")
}

model TenantModelSetting {
  id              String            @id @default(cuid())
  tenantId        String
  modelId         String
  isAllowed       Boolean           @default(true)
  maxUsage        Int?              // Maximum usage per period
  costLimit       Float?            // Cost limit per period
  config          Json?             // Tenant-specific configuration
  isActive        Boolean           @default(true)
  metadata        Json?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  
  // Relations
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  model           AIModel           @relation(fields: [modelId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, modelId])
  @@index([tenantId])
  @@map("tenant_model_settings")
}

model AIModelUsageLog {
  id              String            @id @default(cuid())
  userId          String
  tenantId        String?
  modelId         String
  taskType        TaskType
  inputTokens     Int?
  outputTokens    Int?
  processingTime  Int?              // in milliseconds
  cost            Float?
  status          UsageStatus       @default(COMPLETED)
  errorMessage    String?
  metadata        Json?
  createdAt       DateTime          @default(now())
  
  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant          Tenant?           @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  model           AIModel           @relation(fields: [modelId], references: [id], onDelete: Cascade)
  
  @@index([userId])
  @@index([tenantId])
  @@index([modelId])
  @@index([taskType])
  @@index([status])
  @@index([createdAt])
  @@map("ai_model_usage_logs")
}

model AIModelComparison {
  id              String            @id @default(cuid())
  userId          String
  tenantId        String?
  prompt          String
  models          Json              // Array of model IDs used
  results         Json              // Comparison results
  winnerModelId   String?
  metrics         Json?             // Performance metrics
  feedback        Json?             // User feedback
  metadata        Json?
  createdAt       DateTime          @default(now())
  
  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant          Tenant?           @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  
  @@index([userId])
  @@index([tenantId])
  @@index([createdAt])
  @@map("ai_model_comparisons")
}

// AI Model Enums
enum AIProvider {
  OPENAI
  ANTHROPIC
  GOOGLE
  META
  Z_AI
  OPENROUTER
  LOCAL
  CUSTOM
}

enum AIModelType {
  LANGUAGE
  VISION
  MULTIMODAL
  CODE
  AUDIO
  EMBEDDING
  REASONING
  CREATIVE
}

enum TaskType {
  GENERAL
  CODE_GENERATION
  TEXT_ANALYSIS
  IMAGE_GENERATION
  DATA_ANALYSIS
  TRANSLATION
  SUMMARIZATION
  CREATIVE_WRITING
  RESEARCH
  CHAT
  DOCUMENT_PROCESSING
}

enum UsageStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
  TIMEOUT
}

// Performance Monitoring Models
model PerformanceMetric {
  id              String                @id @default(cuid())
  type            MetricType            @default(RESPONSE_TIME)
  name            String
  value           Float
  unit            String?
  tags            Json?                 // Additional tags for filtering
  timestamp       DateTime              @default(now())
  metadata        Json?
  
  // Relations
  alerts          PerformanceAlert[]
  
  @@index([type])
  @@index([name])
  @@index([timestamp])
  @@map("performance_metrics")
}

model PerformanceAlert {
  id              String                @id @default(cuid())
  metricId        String
  type            AlertType             @default(THRESHOLD)
  severity        AlertSeverity         @default(MEDIUM)
  condition       Json                  // Alert condition
  message         String?
  status          AlertStatus           @default(ACTIVE)
  acknowledgedBy  String?
  acknowledgedAt  DateTime?
  resolvedBy      String?
  resolvedAt      DateTime?
  metadata        Json?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  // Relations
  metric          PerformanceMetric     @relation(fields: [metricId], references: [id], onDelete: Cascade)
  
  @@index([metricId])
  @@index([type])
  @@index([severity])
  @@index([status])
  @@index([createdAt])
  @@map("performance_alerts")
}

model SystemHealth {
  id              String                @id @default(cuid())
  component       String
  status          HealthStatus          @default(HEALTHY)
  metrics         Json?                 // Health metrics
  issues          Json?                 // Current issues
  lastChecked     DateTime              @default(now())
  metadata        Json?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  @@index([component])
  @@index([status])
  @@index([lastChecked])
  @@map("system_health")
}

model RequestTrace {
  id              String                @id @default(cuid())
  traceId         String                @unique
  requestId       String
  userId          String?
  tenantId        String?
  method          String
  path            String
  statusCode      Int
  responseTime    Int                   // in milliseconds
  userAgent       String?
  ipAddress       String?
  error           Json?                 // Error details if any
  metadata        Json?
  createdAt       DateTime              @default(now())
  
  @@index([userId])
  @@index([tenantId])
  @@index([method])
  @@index([path])
  @@index([statusCode])
  @@index([responseTime])
  @@index([createdAt])
  @@map("request_traces")
}

model ErrorLog {
  id              String                @id @default(cuid())
  level           ErrorLevel            @default(ERROR)
  message         String
  stackTrace      String?
  context         Json?                 // Error context
  userId          String?
  tenantId        String?
  requestId       String?
  isResolved      Boolean               @default(false)
  resolvedBy      String?
  resolvedAt      DateTime?
  metadata        Json?
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  
  @@index([level])
  @@index([userId])
  @@index([tenantId])
  @@index([isResolved])
  @@index([createdAt])
  @@map("error_logs")
}

model ResourceUsage {
  id              String                @id @default(cuid())
  type            ResourceType          @default(CPU)
  value           Float
  percentage      Float                 // Percentage of total capacity
  timestamp       DateTime              @default(now())
  metadata        Json?
  
  @@index([type])
  @@index([timestamp])
  @@map("resource_usage")
}

// Performance Monitoring Enums
enum MetricType {
  RESPONSE_TIME
  THROUGHPUT
  ERROR_RATE
  MEMORY_USAGE
  CPU_USAGE
  DISK_USAGE
  NETWORK_USAGE
  DATABASE_QUERIES
  API_CALLS
  AI_MODEL_USAGE
  CUSTOM
}

enum AlertType {
  THRESHOLD
  ANOMALY
  TREND
  AVAILABILITY
  CUSTOM
}

enum AlertSeverity {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum AlertStatus {
  ACTIVE
  ACKNOWLEDGED
  RESOLVED
  SUPPRESSED
}

enum HealthStatus {
  HEALTHY
  WARNING
  CRITICAL
  UNKNOWN
}

enum ErrorLevel {
  DEBUG
  INFO
  WARN
  ERROR
  FATAL
}

enum ResourceType {
  CPU
  MEMORY
  DISK
  NETWORK
  DATABASE
  CACHE
  AI_SERVICES
  CUSTOM
}