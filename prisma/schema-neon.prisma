// This is your Prisma schema file for Neon PostgreSQL,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Neon-specific configuration
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  directUrl = env("DIRECT_URL")
  extensions = [pg_stat_statements, pgcrypto, uuid-ossp]
}

// Multi-Tenant Architecture
model Tenant {
  id              String            @id @default(uuid()) @db.Uuid
  name            String            @unique
  slug            String            @unique
  domain          String?
  logo            String?
  branding        Json?
  configuration    Json?
  plan            TenantPlan        @default(FREE)
  status          TenantStatus      @default(ACTIVE)
  maxUsers        Int               @default(10)
  maxProjects     Int               @default(5)
  maxStorage      Int               @default(1024) // MB
  features        Json?
  metadata        Json?
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime          @updatedAt @db.Timestamptz(6)
  
  // Relations
  users           User[]
  projects        Project[]
  subscriptions   Subscription[]
  settings        TenantSetting[]
  auditLogs       TenantAuditLog[]
  tenantUsers     TenantUser[]
  userRoles       UserRoleAssignment[]
  tenantModelSettings TenantModelSetting[]
  aiModelUsageLogs AIModelUsageLog[]
  aiModelComparisons AIModelComparison[]
  // Enhanced AI Service Relations
  aiServiceConfigs AIServiceConfig[]
  fileStorage     FileStorage[]
  aiRequestLogs    AIRequestLog[]
  
  @@map("tenants")
}

model TenantSetting {
  id              String            @id @default(uuid()) @db.Uuid
  tenantId        String            @db.Uuid
  key             String
  value           Json
  category        SettingCategory   @default(GENERAL)
  isSystem        Boolean           @default(false)
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime          @updatedAt @db.Timestamptz(6)
  
  // Relations
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, key])
  @@map("tenant_settings")
}

model TenantAuditLog {
  id              String            @id @default(uuid()) @db.Uuid
  tenantId        String            @db.Uuid
  userId          String?           @db.Uuid
  action          String
  resourceType    String?
  resourceId      String?
  oldValues       Json?
  newValues       Json?
  metadata        Json?
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime          @default(now()) @db.Timestamptz(6)
  
  // Relations
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User?             @relation(fields: [userId], references: [id], onDelete: SetNull)
  
  @@index([tenantId])
  @@index([action])
  @@index([timestamp])
  @@map("tenant_audit_logs")
}

model TenantUser {
  id              String            @id @default(uuid()) @db.Uuid
  tenantId        String            @db.Uuid
  userId          String            @db.Uuid
  role            TenantUserRole    @default(MEMBER)
  status          TenantUserStatus  @default(ACTIVE)
  invitedBy       String?           @db.Uuid
  invitedAt       DateTime          @default(now()) @db.Timestamptz(6)
  joinedAt        DateTime?         @db.Timestamptz(6)
  permissions     Json?
  metadata        Json?
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime          @updatedAt @db.Timestamptz(6)
  
  // Relations
  tenant          Tenant            @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([tenantId, userId])
  @@map("tenant_users")
}

// Core User Management
model User {
  id              String   @id @default(uuid()) @db.Uuid
  email           String   @unique
  password        String   // Added for authentication
  name            String?
  avatar          String?
  role            UserRole @default(USER)
  credits         Int      @default(1000) // User credits for AI services
  dailyLimit      Int      @default(100) // Daily generation limit
  subscriptions   Subscription[]
  apiKey          String?
  isActive        Boolean  @default(true)
  lastLoginAt     DateTime? @db.Timestamptz(6)
  createdAt       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime @updatedAt @db.Timestamptz(6)
  
  // Relations
  posts           Post[]
  sessions        Session[]
  projects        Project[]
  analyses        Analysis[]
  conversations   Conversation[]
  uploads         Upload[]
  // Business Solutions Relations
  contractAnalyses ContractAnalysis[]
  localizationAnalyses LocalizationAnalysis[]
  customerBehaviorAnalyses CustomerBehaviorAnalysis[]
  complianceMonitoring ComplianceMonitoring[]
  learningPaths   LearningPath[]
  // Zero-Trust Security Relations
  accessControls  AccessControl[]
  auditLogs       AuditLog[]
  securityAuditLogs AccessAuditLog[]
  // Enhanced Analytics Relations
  predictions     Prediction[]
  // Enhanced Relations
  dashboards      Dashboard[]
  dashboardShares DashboardShare[]
  workflows       Workflow[]
  workflowExecutions WorkflowExecution[]
  searchQueries   SearchQuery[]
  apiUsage        ApiUsage[]
  apiKeys         ApiKey[]
  // Multi-Tenant Relations
  tenantUsers     TenantUser[]
  tenantAuditLogs TenantAuditLog[]
  tenants         Tenant[]
  // Enhanced RBAC Relations
  userRoles       UserRoleAssignment[]
  // AI Model Relations
  modelPreferences UserModelPreference[]
  modelUsageLogs  AIModelUsageLog[]
  modelComparisons AIModelComparison[]
  // Enhanced AI Service Relations
  aiRequestLogs   AIRequestLog[]
  fileStorage     FileStorage[]
  creditTransactions CreditTransaction[]
  contentGenerations ContentGeneration[]
  // Developer Access Control Relations
  developerAccessKeys DeveloperAccessKey[]
  developerAccessEvents DeveloperAccessEvent[]
  
  @@map("users")
}

// Credit Transaction Management
model CreditTransaction {
  id              String               @id @default(uuid()) @db.Uuid
  userId          String               @db.Uuid
  amount          Int
  type            CreditTransactionType
  description     String
  metadata        Json?
  createdAt       DateTime             @default(now()) @db.Timestamptz(6)
  
  // Relations
  user            User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("credit_transactions")
}

// Content Generation Tracking
model ContentGeneration {
  id              String                   @id @default(uuid()) @db.Uuid
  userId          String                   @db.Uuid
  type            ContentGenerationType
  input           String?
  output          Json?
  tokensUsed      Int?
  processingTime  Int?
  cost            Float?
  status          ContentGenerationStatus @default(COMPLETED)
  metadata        Json?
  createdAt       DateTime                 @default(now()) @db.Timestamptz(6)
  
  // Relations
  user            User                     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("content_generations")
}

model Session {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @db.Uuid
  token     String   @unique
  expiresAt DateTime @db.Timestamptz(6)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("sessions")
}

// Security Settings for PIN Authentication
model SecuritySettings {
  id        String   @id @default("main")
  pin_hash  String
  salt      String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  
  @@map("security_settings")
}

// Subscription Management
model Subscription {
  id              String            @id @default(uuid()) @db.Uuid
  userId          String            @db.Uuid
  tenantId        String?           @db.Uuid
  plan            SubscriptionPlan
  status          SubscriptionStatus @default(ACTIVE)
  currentPeriodStart DateTime        @db.Timestamptz(6)
  currentPeriodEnd   DateTime        @db.Timestamptz(6)
  cancelAtPeriodEnd Boolean           @default(false)
  metadata        Json?
  createdAt       DateTime          @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime          @updatedAt @db.Timestamptz(6)
  
  // Relations
  user            User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant          Tenant?           @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  usage           SubscriptionUsage[]
  usageMetrics    UsageMetric[]
  
  @@unique([userId, tenantId])
  @@map("subscriptions")
}

model SubscriptionUsage {
  id             String   @id @default(uuid()) @db.Uuid
  subscriptionId String   @db.Uuid
  metric         String
  value          Int
  period         String   // "daily", "monthly", "yearly"
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  
  // Relations
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@unique([subscriptionId, metric, period])
  @@map("subscription_usage")
}

// Project Management
model Project {
  id          String      @id @default(uuid()) @db.Uuid
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  userId      String      @db.Uuid
  tenantId    String?     @db.Uuid
  metadata    Json?
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime    @updatedAt @db.Timestamptz(6)
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant      Tenant?     @relation(fields: [tenantId], references: [id], onDelete: SetNull)
  analyses    Analysis[]
  uploads     Upload[]
  // Business Solutions Relations
  contractAnalyses ContractAnalysis[]
  localizationAnalyses LocalizationAnalysis[]
  customerBehaviorAnalyses CustomerBehaviorAnalysis[]
  complianceMonitoring ComplianceMonitoring[]
  learningPaths   LearningPath[]
  
  @@map("projects")
}

// AI Analysis & Processing
model Analysis {
  id            String           @id @default(uuid()) @db.Uuid
  type          AnalysisType
  input         String
  result        Json?
  confidence    Float?
  status        AnalysisStatus   @default(PENDING)
  userId        String           @db.Uuid
  projectId     String?          @db.Uuid
  model         String?
  processingTime Int?
  metadata      Json?
  createdAt     DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime         @updatedAt @db.Timestamptz(6)
  
  // Relations
  user          User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  project       Project?         @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("analyses")
}

// Conversations & Chat
model Conversation {
  id        String   @id @default(uuid()) @db.Uuid
  title     String?
  userId    String   @db.Uuid
  isActive  Boolean  @default(true)
  metadata  Json?
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @db.Timestamptz(6)
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages  Message[]
  
  @@map("conversations")
}

model Message {
  id            String      @id @default(uuid()) @db.Uuid
  conversationId String     @db.Uuid
  role          MessageRole
  content       String
  metadata      Json?
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  
  // Relations
  conversation  Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@map("messages")
}

// File Upload & Management
model Upload {
  id          String      @id @default(uuid()) @db.Uuid
  filename    String
  originalName String
  path        String
  size        Int
  mimeType    String
  status      UploadStatus @default(PENDING)
  userId      String      @db.Uuid
  projectId   String?     @db.Uuid
  metadata    Json?
  processedAt DateTime?   @db.Timestamptz(6)
  createdAt   DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime    @updatedAt @db.Timestamptz(6)
  
  // Relations
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  project     Project?    @relation(fields: [projectId], references: [id], onDelete: SetNull)
  
  @@map("uploads")
}

// Enhanced Blog/Content Management
model Post {
  id          String   @id @default(uuid()) @db.Uuid
  title       String
  content     String?
  excerpt     String?
  slug        String   @unique
  published   Boolean  @default(false)
  authorId    String   @db.Uuid
  featured    Boolean  @default(false)
  metadata    Json?
  publishedAt DateTime? @db.Timestamptz(6)
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @db.Timestamptz(6)
  
  // Relations
  author      User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  @@map("posts")
}

// Enums for better PostgreSQL compatibility
enum TenantPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  DELETED
}

enum TenantUserRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum TenantUserStatus {
  ACTIVE
  INACTIVE
  PENDING
  SUSPENDED
}

enum SettingCategory {
  GENERAL
  SECURITY
  BILLING
  NOTIFICATIONS
  INTEGRATIONS
  AI_SERVICES
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

enum CreditTransactionType {
  CREDIT
  DEBIT
  REFUND
  BONUS
}

enum ContentGenerationType {
  TEXT
  IMAGE
  CODE
  AUDIO
  VIDEO
  ANALYSIS
}

enum ContentGenerationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum SubscriptionPlan {
  FREE
  BASIC
  PRO
  ENTERPRISE
  CUSTOM
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  EXPIRED
  PENDING
  SUSPENDED
}

enum ProjectStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  ON_HOLD
  ARCHIVED
}

enum AnalysisType {
  SENTIMENT
  CLASSIFICATION
  EXTRACTION
  SUMMARIZATION
  TRANSLATION
  CUSTOM
}

enum AnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}

enum UploadStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Additional enums for business solutions
enum ContractType {
  EMPLOYMENT
  SERVICE
  NDA
  SALES
  PARTNERSHIP
  LICENSING
  OTHER
}

enum ContractAnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum LocalizationStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum BehaviorAnalysisStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

enum ComplianceStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  CANCELLED
}

// Additional models for enhanced features would continue here...
// (The rest of the models from the original schema would be converted similarly)