name: Dependency Management

on:
  schedule:
    - cron: '0 2 * * 1'  # Every Monday at 2 AM
  push:
    branches: [ main, master ]
    paths:
      - 'package.json'
      - 'package-lock.json'
  workflow_dispatch:

env:
  NODE_VERSION: '20.x'

jobs:
  check-outdated:
    name: Check Outdated Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      timeout-minutes: 8
      
    - name: Check outdated dependencies
      run: |
        timeout 120s npm outdated --json > outdated-deps.json || echo "Outdated check timed out"
      timeout-minutes: 3
      
    - name: Upload outdated dependencies report
      uses: actions/upload-artifact@v4
      with:
        name: outdated-dependencies
        path: outdated-deps.json
      continue-on-error: true
        
    - name: Create issue if outdated dependencies found
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let outdatedDeps = [];
          
          try {
            const outdatedDepsContent = fs.readFileSync('outdated-deps.json', 'utf8');
            outdatedDeps = JSON.parse(outdatedDepsContent);
          } catch (error) {
            console.log('No outdated dependencies found or error reading file');
            return;
          }
          
          if (Array.isArray(outdatedDeps) && outdatedDeps.length > 0) {
            const title = 'üì¶ Outdated Dependencies Found';
            const body = outdatedDeps.map(dep => 
              `**${dep.name}**: ${dep.current} ‚Üí ${dep.latest}`
            ).join('\n');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['dependencies', 'maintenance', 'automated']
            });
          }
      continue-on-error: true

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      timeout-minutes: 8
      
    - name: Run npm audit
      run: |
        timeout 120s npm audit --audit-level=moderate --json > audit-report.json || echo "Audit timed out"
      timeout-minutes: 3
      
    - name: Upload audit report
      uses: actions/upload-artifact@v4
      with:
        name: security-audit-report
        path: audit-report.json
      continue-on-error: true
        
    - name: Create issue if vulnerabilities found
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          let auditReport = { advisories: {} };
          
          try {
            const auditReportContent = fs.readFileSync('audit-report.json', 'utf8');
            auditReport = JSON.parse(auditReportContent);
          } catch (error) {
            console.log('No security vulnerabilities found or error reading file');
            return;
          }
          
          if (auditReport.advisories && Object.keys(auditReport.advisories).length > 0) {
            const vulnerabilities = Object.values(auditReport.advisories);
            const title = 'üö® Security Vulnerabilities Found';
            const body = vulnerabilities.map(vuln => 
              `**${vuln.module_name}**: ${vuln.severity} - ${vuln.title}\nFix: \`npm install ${vuln.module_name}@${vuln.patched_versions}\``
            ).join('\n\n');
            
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'vulnerability', 'automated', 'critical']
            });
          }
      continue-on-error: true

  update-dependencies:
    name: Update Dependencies
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    timeout-minutes: 15
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      timeout-minutes: 8
      
    - name: Update dependencies
      run: |
        timeout 180s npm update || echo "Update timed out"
      timeout-minutes: 4
      
    - name: Run tests
      run: |
        echo "No tests configured - skipping test phase"
        echo "Test placeholder - configure actual tests when available"
      
    - name: Commit dependency updates
      uses: stefanzweifel/git-auto-commit-action@v5
      with:
        commit_message: 'chore: Update dependencies'
        file_pattern: 'package.json package-lock.json'
      continue-on-error: true
        
    - name: Create PR for dependency updates
      uses: peter-evans/create-pull-request@v5
      with:
        title: 'chore: Update dependencies'
        body: 'Automated dependency update'
        branch: 'auto-dependency-update'
        labels: ['dependencies', 'automated']
      continue-on-error: true

  license-check:
    name: License Check
    runs-on: ubuntu-latest
    timeout-minutes: 8
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      timeout-minutes: 8
      
    - name: Check licenses
      run: |
        timeout 60s npx license-checker --production --onlyAllow 'MIT;Apache-2.0;BSD;ISC' > license-report.txt || echo "License check timed out"
      timeout-minutes: 2
      
    - name: Upload license report
      uses: actions/upload-artifact@v4
      with:
        name: license-report
        path: license-report.txt
      continue-on-error: true
        
    - name: Create issue if license issues found
      if: failure()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const licenseReport = fs.readFileSync('license-report.txt', 'utf8');
          
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: '‚öñÔ∏è License Compliance Issues Found',
            body: licenseReport,
            labels: ['legal', 'compliance', 'automated']
          });
      continue-on-error: true