# OptiMind AI Ecosystem - Zero-Trust Security Implementation
# Premium Diamond-Grade Security Configuration

# Zero-Trust Security Service
apiVersion: v1
kind: ServiceAccount
metadata:
  name: optimind-ai-service-account
  namespace: optimind-ai-ecosystem
  labels:
    app: optimind-ai
    security-tier: "enterprise"
    account-type: "service"
  annotations:
    description: "Service account for OptiMind AI Ecosystem"
    iam.amazonaws.com/role: "optimind-ai-ecosystem-role"
---
# RBAC Role for Service Account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: optimind-ai-role
  namespace: optimind-ai-ecosystem
  labels:
    app: optimind-ai
    security-tier: "enterprise"
    role-type: "custom"
rules:
- apiGroups: [""]
  resources: ["pods", "services", "configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["networkpolicies"]
  verbs: ["get", "list", "watch"]
---
# RBAC Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: optimind-ai-role-binding
  namespace: optimind-ai-ecosystem
  labels:
    app: optimind-ai
    security-tier: "enterprise"
    binding-type: "role-to-service-account"
subjects:
- kind: ServiceAccount
  name: optimind-ai-service-account
  namespace: optimind-ai-ecosystem
roleRef:
  kind: Role
  name: optimind-ai-role
  apiGroup: rbac.authorization.k8s.io
---
# Pod Security Policy
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: optimind-ai-psp
  namespace: optimind-ai-ecosystem
  labels:
    app: optimind-ai
    security-tier: "enterprise"
    policy-type: "pod-security"
  annotations:
    description: "Pod Security Policy for OptiMind AI Ecosystem"
    seccomp.security.alpha.kubernetes.io/allowedProfileName: "runtime/default"
spec:
  privileged: false
  allowPrivilegeEscalation: false
  requiredDropCapabilities:
    - ALL
  volumes:
    - 'configMap'
    - 'emptyDir'
    - 'projected'
    - 'secret'
    - 'downwardAPI'
    - 'persistentVolumeClaim'
  runAsUser:
    rule: 'MustRunAsNonRoot'
  seLinux:
    rule: 'RunAsAny'
  fsGroup:
    rule: 'RunAsAny'
  readOnlyRootFilesystem: true
---
# Pod Security Policy Binding
apiVersion: policy/v1beta1
kind: PodSecurityPolicy
metadata:
  name: optimind-ai-psp-binding
  namespace: optimind-ai-ecosystem
  labels:
    app: optimind-ai
    security-tier: "enterprise"
    binding-type: "psp-to-service-account"
roleRef:
  kind: PodSecurityPolicy
  name: optimind-ai-psp
  apiGroup: policy
subjects:
- kind: ServiceAccount
  name: optimind-ai-service-account
  namespace: optimind-ai-ecosystem
---
# Resource Quotas
apiVersion: v1
kind: ResourceQuota
metadata:
  name: optimind-ai-resource-quota
  namespace: optimind-ai-ecosystem
  labels:
    app: optimind-ai
    security-tier: "enterprise"
    quota-type: "resource-limits"
spec:
  hard:
    requests.cpu: "2"
    requests.memory: "4Gi"
    limits.cpu: "4"
    limits.memory: "8Gi"
    persistentvolumeclaims: "5"
    requests.storage: "50Gi"
    count/pods: "10"
    count/services: "5"
    count/deployments: "3"
  scopes:
  - NotTerminating
---
# Limit Range
apiVersion: v1
kind: LimitRange
metadata:
  name: optimind-ai-limit-range
  namespace: optimind-ai-ecosystem
  labels:
    app: optimind-ai
    security-tier: "enterprise"
    limit-type: "resource-constraints"
spec:
  limits:
  - default:
      cpu: "1000m"
      memory: "1Gi"
    defaultRequest:
      cpu: "100m"
      memory: "256Mi"
    max:
      cpu: "2000m"
      memory: "2Gi"
    min:
      cpu: "50m"
      memory: "128Mi"
    type: "Container"