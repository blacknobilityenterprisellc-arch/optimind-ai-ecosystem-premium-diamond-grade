# OptiMind AI Ecosystem - Premium Diamond-Grade Docker Compose
# Local development environment with security and monitoring

version: '3.8'

services:
  # Main Application Service
  optimind-ai-app:
    build:
      context: ../..
      dockerfile: infrastructure/docker/Dockerfile
      target: production
    container_name: optimind-ai-ecosystem
    restart: unless-stopped
    ports:
      - "3000:3000"
      - "3001:3001" # Debug port
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://optimind:optimind123@postgres:5432/optimind_ai
      - NEXTAUTH_URL=http://localhost:3000
      - NEXTAUTH_SECRET=your-nextauth-secret-here
      - ZAI_API_KEY=your-zai-api-key-here
      - OPENAI_API_KEY=your-openai-api-key-here
      - ANTHROPIC_API_KEY=your-anthropic-api-key-here
    volumes:
      - ../..:/app:cached
      - /app/node_modules
      - /app/.next
    depends_on:
      - postgres
      - redis
      - elasticsearch
    networks:
      - optimind-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
      - apparmor:unconfined
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - DAC_OVERRIDE

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: optimind-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: optimind_ai
      POSTGRES_USER: optimind
      POSTGRES_PASSWORD: optimind123
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - optimind-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U optimind"]
      interval: 30s
      timeout: 10s
      retries: 5
    security_opt:
      - no-new-privileges:true

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: optimind-redis
    restart: unless-stopped
    command: redis-server --requirepass optimind123 --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - optimind-network
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "optimind123", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # Elasticsearch for Search
  elasticsearch:
    image: elasticsearch:8.11.0
    container_name: optimind-elasticsearch
    restart: unless-stopped
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - optimind-network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true
    ulimits:
      memlock:
        soft: -1
        hard: -1

  # Prometheus for Metrics
  prometheus:
    image: prom/prometheus:latest
    container_name: optimind-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - optimind-network
    security_opt:
      - no-new-privileges:true

  # Grafana for Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: optimind-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=optimind123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - "3001:3000"
    networks:
      - optimind-network
    depends_on:
      - prometheus
    security_opt:
      - no-new-privileges:true

  # Jaeger for Tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: optimind-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_ZIPKIN_HOST_PORT=:9411
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"
      - "14268:14268"
      - "14250:14250"
      - "9411:9411"
    networks:
      - optimind-network
    security_opt:
      - no-new-privileges:true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: optimind-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - optimind-ai-app
    networks:
      - optimind-network
    security_opt:
      - no-new-privileges:true

# Volume Definitions
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  elasticsearch_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Network Definition
networks:
  optimind-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Security Configuration
secrets:
  db_password:
    file: ./secrets/db_password.txt
  redis_password:
    file: ./secrets/redis_password.txt
  api_key:
    file: ./secrets/api_key.txt

# Logging Configuration
logging:
  driver: "json-file"
  options:
    max-size: "10m"
    max-file: "3"
    compress: "true"