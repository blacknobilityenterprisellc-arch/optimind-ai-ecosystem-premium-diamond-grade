// OptiMind AI Ecosystem - Premium Diamond-Grade Jenkins Pipeline
// Enterprise-grade CI/CD pipeline with security, compliance, and quality gates

pipeline {
    agent {
        kubernetes {
            yaml '''
            apiVersion: v1
            kind: Pod
            metadata:
              labels:
                app: optimind-ai-pipeline
                tier: ci-cd
            spec:
              containers:
              - name: node
                image: node:20-alpine
                command:
                - cat
                tty: true
                resources:
                  requests:
                    cpu: "100m"
                    memory: "256Mi"
                  limits:
                    cpu: "1000m"
                    memory: "1Gi"
                env:
                - name: NODE_ENV
                  value: "test"
              - name: docker
                image: docker:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - name: docker-sock
                  mountPath: /var/run/docker.sock
              - name: kubectl
                image: bitnami/kubectl:latest
                command:
                - cat
                tty: true
              volumes:
              - name: docker-sock
                hostPath:
                  path: /var/run/docker.sock
            '''
        }
    }
    
    // Environment Configuration
    environment {
        BRANCH_NAME = env.BRANCH_NAME ?: 'unknown'
        BUILD_NUMBER = env.BUILD_NUMBER ?: '0'
        GIT_COMMIT = env.GIT_COMMIT ?: 'unknown'
        NODE_VERSION = '20'
        NPM_REGISTRY = 'https://registry.npmjs.org'
    }
    
    // Pipeline Options
    options {
        buildDiscarder(logRotator(numToKeepStr: '30'))
        disableConcurrentBuilds()
        overrideIndexTriggers(true)
        retry(3)
        timeout(time: 2, unit: 'HOURS')
        timestamps()
    }
    
    // Pipeline Parameters
    parameters {
        choice(name: 'ENVIRONMENT', choices: ['development', 'staging', 'production'], description: 'Target environment')
        choice(name: 'DEPLOYMENT_STRATEGY', choices: ['rolling', 'blue-green', 'canary'], description: 'Deployment strategy')
        booleanParam(name: 'RUN_SECURITY_SCAN', defaultValue: true, description: 'Run security scanning')
        booleanParam(name: 'RUN_PERFORMANCE_TEST', defaultValue: true, description: 'Run performance testing')
        booleanParam(name: 'RUN_COMPLIANCE_CHECK', defaultValue: true, description: 'Run compliance checks')
        booleanParam(name: 'GENERATE_REPORTS', defaultValue: true, description: 'Generate comprehensive reports')
    }
    
    // Pipeline Stages
    stages {
        
        // Stage 1: Checkout & Setup
        stage('üöÄ Checkout & Setup') {
            steps {
                script {
                    echo "üöÄ Starting OptiMind AI Ecosystem Pipeline - Build #${env.BUILD_NUMBER}"
                    echo "üåç Environment: ${params.ENVIRONMENT}"
                    echo "üîÄ Branch: ${env.BRANCH_NAME}"
                    echo "üìã Commit: ${env.GIT_COMMIT}"
                    
                    // Checkout code
                    checkout scm
                    
                    // Setup environment
                    sh '''
                        echo "üîß Setting up build environment..."
                        node --version
                        npm --version
                        
                        # Install dependencies with security audit
                        npm ci --audit=moderate --fund
                        npm audit --audit-level=moderate --production
                        
                        # Setup environment variables
                        export NODE_ENV=test
                        export NEXT_TELEMETRY_DISABLED=1
                    '''
                    
                    // Validate setup
                    sh '''
                        echo "‚úÖ Validating setup..."
                        npm run type-check || echo "‚ö†Ô∏è Type check failed - continuing"
                        npm run lint || echo "‚ö†Ô∏è Lint failed - continuing"
                    '''
                }
            }
        }
        
        // Stage 2: Security Scan
        stage('üîí Security Scan') {
            when { 
                expression { params.RUN_SECURITY_SCAN == true }
            }
            parallel {
                stage('üõ°Ô∏è Vulnerability Scan') {
                    steps {
                        script {
                            sh '''
                                echo "üõ°Ô∏è Running vulnerability scanning..."
                                
                                # npm audit
                                npm audit --audit-level=moderate --json > audit-report.json || true
                                
                                # snyk scan (if available)
                                if command -v snyk >/dev/null 2>&1; then
                                    snyk test --json > snyk-report.json || true
                                fi
                                
                                # Check for critical vulnerabilities
                                echo "‚úÖ Vulnerability scan completed"
                            '''
                        }
                    }
                }
                
                stage('üîç Code Security Analysis') {
                    steps {
                        script {
                            sh '''
                                echo "üîç Running code security analysis..."
                                
                                # Run security-focused linting
                                npm run lint:security || echo "‚ö†Ô∏è Security lint failed - continuing"
                                
                                # Check for secrets
                                if command -v gitleaks >/dev/null 2>&1; then
                                    gitleaks detect --source=. --verbose --report-format=json --report=gitleaks-report.json || true
                                fi
                                
                                echo "‚úÖ Security analysis completed"
                            '''
                        }
                    }
                }
            }
        }
        
        // Stage 3: Build & Test
        stage('üî® Build & Test') {
            parallel {
                stage('üì¶ Build Application') {
                    steps {
                        script {
                            sh '''
                                echo "üì¶ Building OptiMind AI Ecosystem..."
                                
                                # Clean previous builds
                                npm run clean || true
                                
                                # Generate Prisma client
                                npx prisma generate
                                
                                # Build application
                                npm run build
                                
                                # Build Docker image
                                docker build -f infrastructure/docker/Dockerfile -t optimind-ai-ecosystem:${env.BUILD_NUMBER} .
                                
                                echo "‚úÖ Build completed successfully"
                            '''
                        }
                    }
                }
                
                stage('üß™ Run Tests') {
                    steps {
                        script {
                            sh '''
                                echo "üß™ Running test suite..."
                                
                                # Unit tests
                                npm run test:unit -- --coverage --json --outputFile=unit-test-results.json || true
                                
                                # Integration tests
                                npm run test:integration -- --json --outputFile=integration-test-results.json || true
                                
                                # E2E tests (if enabled)
                                if [ "${params.ENVIRONMENT}" != "production" ]; then
                                    npm run test:e2e || echo "‚ö†Ô∏è E2E tests failed - continuing"
                                fi
                                
                                echo "‚úÖ Test suite completed"
                            '''
                        }
                    }
                }
            }
        }
        
        // Stage 4: Performance Test
        stage('‚ö° Performance Test') {
            when { 
                expression { params.RUN_PERFORMANCE_TEST == true }
            }
            steps {
                script {
                    sh '''
                        echo "‚ö° Running performance testing..."
                        
                        # Start local services for testing
                        docker-compose -f infrastructure/docker/docker-compose.yml up -d
                        
                        # Wait for services to be ready
                        sleep 30
                        
                        # Run load testing
                        if command -v k6 >/dev/null 2>&1; then
                            k6 run --vus 10 --duration 30s --out json=performance-results.json scripts/performance-test.js || true
                        fi
                        
                        # Run performance benchmarks
                        npm run benchmark || echo "‚ö†Ô∏è Benchmark failed - continuing"
                        
                        # Stop local services
                        docker-compose -f infrastructure/docker/docker-compose.yml down
                        
                        echo "‚úÖ Performance testing completed"
                    '''
                }
            }
        }
        
        // Stage 5: Compliance Check
        stage('üìã Compliance Check') {
            when { 
                expression { params.RUN_COMPLIANCE_CHECK == true }
            }
            steps {
                script {
                    sh '''
                        echo "üìã Running compliance checks..."
                        
                        # Check for compliance issues
                        npm run compliance:check || echo "‚ö†Ô∏è Compliance check failed - continuing"
                        
                        # Generate compliance report
                        npm run compliance:report || echo "‚ö†Ô∏è Compliance report failed - continuing"
                        
                        # Validate security policies
                        npm run security:validate || echo "‚ö†Ô∏è Security validation failed - continuing"
                        
                        echo "‚úÖ Compliance checks completed"
                    '''
                }
            }
        }
        
        // Stage 6: Deploy
        stage('üöÄ Deploy') {
            when {
                anyOf {
                    branch 'main'
                    branch 'master'
                    branch 'develop'
                }
            }
            steps {
                script {
                    // Determine deployment strategy
                    def deploymentStrategy = params.DEPLOYMENT_STRATEGY
                    
                    echo "üöÄ Deploying to ${params.ENVIRONMENT} using ${deploymentStrategy} strategy..."
                    
                    // Kubernetes deployment
                    if (params.ENVIRONMENT == 'production') {
                        sh '''
                            echo "üåê Deploying to production..."
                            
                            # Apply Kubernetes manifests
                            kubectl apply -f infrastructure/kubernetes/namespace.yaml
                            kubectl apply -f infrastructure/kubernetes/configmap.yaml
                            kubectl apply -f infrastructure/kubernetes/secrets.yaml
                            kubectl apply -f infrastructure/kubernetes/service.yaml
                            kubectl apply -f infrastructure/kubernetes/deployment.yaml
                            kubectl apply -f infrastructure/kubernetes/ingress.yaml
                            
                            # Wait for deployment to be ready
                            kubectl rollout status deployment/optimind-ai-app -n optimind-ai-ecosystem --timeout=300s
                            
                            # Verify deployment
                            kubectl get pods -n optimind-ai-ecosystem
                            kubectl get services -n optimind-ai-ecosystem
                            
                            echo "‚úÖ Production deployment completed"
                        '''
                    } else if (params.ENVIRONMENT == 'staging') {
                        sh '''
                            echo "üé≠ Deploying to staging..."
                            
                            # Apply staging-specific configurations
                            kubectl apply -f infrastructure/kubernetes/namespace.yaml
                            kubectl apply -f infrastructure/kubernetes/configmap-staging.yaml
                            kubectl apply -f infrastructure/kubernetes/secrets-staging.yaml
                            kubectl apply -f infrastructure/kubernetes/service.yaml
                            kubectl apply -f infrastructure/kubernetes/deployment-staging.yaml
                            kubectl apply -f infrastructure/kubernetes/ingress-staging.yaml
                            
                            # Wait for deployment
                            kubectl rollout status deployment/optimind-ai-app-staging -n optimind-ai-ecosystem --timeout=300s
                            
                            echo "‚úÖ Staging deployment completed"
                        '''
                    } else {
                        sh '''
                            echo "üîß Deploying to development..."
                            
                            # Use Docker Compose for development
                            docker-compose -f infrastructure/docker/docker-compose.dev.yml up -d
                            
                            # Wait for services
                            sleep 20
                            
                            # Verify deployment
                            docker-compose -f infrastructure/docker/docker-compose.dev.yml ps
                            
                            echo "‚úÖ Development deployment completed"
                        '''
                    }
                }
            }
        }
        
        // Stage 7: Post-Deployment
        stage('üîç Post-Deployment') {
            steps {
                script {
                    parallel {
                        stage('üß™ Smoke Tests') {
                            steps {
                                script {
                                    sh '''
                                        echo "üß™ Running smoke tests..."
                                        
                                        # Get application URL
                                        if [ "${params.ENVIRONMENT}" = "production" ]; then
                                            APP_URL="https://optimind.local"
                                        elif [ "${params.ENVIRONMENT}" = "staging" ]; then
                                            APP_URL="https://staging.optimind.local"
                                        else
                                            APP_URL="http://localhost:3000"
                                        fi
                                        
                                        # Run smoke tests
                                        curl -f "$APP_URL/api/health" || echo "‚ö†Ô∏è Health check failed"
                                        curl -f "$APP_URL/api/ready" || echo "‚ö†Ô∏è Ready check failed"
                                        
                                        echo "‚úÖ Smoke tests completed"
                                    '''
                                }
                            }
                        }
                        
                        stage('üìä Generate Reports') {
                            when { 
                                expression { params.GENERATE_REPORTS == true }
                            }
                            steps {
                                script {
                                    sh '''
                                        echo "üìä Generating deployment reports..."
                                        
                                        # Create deployment report
                                        cat > deployment-report.json << EOF
                                        {
                                            "build": {
                                                "number": "${env.BUILD_NUMBER}",
                                                "commit": "${env.GIT_COMMIT}",
                                                "branch": "${env.BRANCH_NAME}"
                                            },
                                            "deployment": {
                                                "environment": "${params.ENVIRONMENT}",
                                                "strategy": "${params.DEPLOYMENT_STRATEGY}",
                                                "timestamp": "$(date -Iseconds)"
                                            },
                                            "status": {
                                                "security_scan": "${params.RUN_SECURITY_SCAN}",
                                                "performance_test": "${params.RUN_PERFORMANCE_TEST}",
                                                "compliance_check": "${params.RUN_COMPLIANCE_CHECK}"
                                            }
                                        }
                                        EOF
                                        
                                        # Generate HTML report
                                        if command -v jq >/dev/null 2>&1; then
                                            jq '.' deployment-report.json > deployment-report-pretty.json
                                        fi
                                        
                                        echo "‚úÖ Reports generated successfully"
                                    '''
                                }
                            }
                        }
                    }
                }
            }
        }
    }
    
    // Post-Build Actions
    post {
        always {
            script {
                echo "üèÅ Pipeline execution completed"
                
                // Archive artifacts
                archiveArtifacts artifacts: '**/*.json,**/*.log,**/*.html', allowEmptyArchive: true
                
                // Clean up
                cleanWs()
            }
        }
        
        success {
            script {
                echo "üéâ Pipeline completed successfully!"
                
                // Send success notification
                emailext (
                    subject: "‚úÖ OptiMind AI Ecosystem - Build #${env.BUILD_NUMBER} Successful",
                    body: """
                        <h2>üéâ Build Successful</h2>
                        <p><strong>Build #${env.BUILD_NUMBER}</strong> completed successfully</p>
                        <ul>
                            <li><strong>Branch:</strong> ${env.BRANCH_NAME}</li>
                            <li><strong>Environment:</strong> ${params.ENVIRONMENT}</li>
                            <li><strong>Strategy:</strong> ${params.DEPLOYMENT_STRATEGY}</li>
                            <li><strong>Commit:</strong> ${env.GIT_COMMIT}</li>
                        </ul>
                        <p>üöÄ Deployment completed successfully!</p>
                    """,
                    to: 'devops@optimind.local',
                    mimeType: 'text/html'
                )
            }
        }
        
        failure {
            script {
                echo "‚ùå Pipeline failed!"
                
                // Send failure notification
                emailext (
                    subject: "‚ùå OptiMind AI Ecosystem - Build #${env.BUILD_NUMBER} Failed",
                    body: """
                        <h2>‚ùå Build Failed</h2>
                        <p><strong>Build #${env.BUILD_NUMBER}</strong> failed</p>
                        <ul>
                            <li><strong>Branch:</strong> ${env.BRANCH_NAME}</li>
                            <li><strong>Environment:</strong> ${params.ENVIRONMENT}</li>
                            <li><strong>Strategy:</strong> ${params.DEPLOYMENT_STRATEGY}</li>
                            <li><strong>Commit:</strong> ${env.GIT_COMMIT}</li>
                        </ul>
                        <p>üîß Please check the build logs for details.</p>
                    """,
                    to: 'devops@optimind.local',
                    mimeType: 'text/html'
                )
            }
        }
        
        unstable {
            script {
                echo "‚ö†Ô∏è Pipeline unstable!"
                
                // Send unstable notification
                emailext (
                    subject: "‚ö†Ô∏è OptiMind AI Ecosystem - Build #${env.BUILD_NUMBER} Unstable",
                    body: """
                        <h2>‚ö†Ô∏è Build Unstable</h2>
                        <p><strong>Build #${env.BUILD_NUMBER}</strong> is unstable</p>
                        <ul>
                            <li><strong>Branch:</strong> ${env.BRANCH_NAME}</li>
                            <li><strong>Environment:</strong> ${params.ENVIRONMENT}</li>
                            <li><strong>Strategy:</strong> ${params.DEPLOYMENT_STRATEGY}</li>
                            <li><strong>Commit:</strong> ${env.GIT_COMMIT}</li>
                        </ul>
                        <p>üîß Some tests failed but deployment continued.</p>
                    """,
                    to: 'devops@optimind.local',
                    mimeType: 'text/html'
                )
            }
        }
    }
}