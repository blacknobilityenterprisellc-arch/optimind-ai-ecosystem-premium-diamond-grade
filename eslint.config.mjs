import eslint from '@eslint/js';
import tseslint from '@typescript-eslint/eslint-plugin';
import tsparser from '@typescript-eslint/parser';
import prettier from 'eslint-config-prettier';

export default [
  eslint.configs.recommended,
  {
    files: ['**/*.{ts,tsx,js,jsx}'],
    languageOptions: {
      parser: tsparser,
      parserOptions: {
        project: './tsconfig.json',
        ecmaVersion: 2024,
        sourceType: 'module',
        globals: {
          console: 'readonly',
          setTimeout: 'readonly',
          clearTimeout: 'readonly',
          setInterval: 'readonly',
          clearInterval: 'readonly',
          Buffer: 'readonly',
          crypto: 'readonly',
          fetch: 'readonly',
          URL: 'readonly',
          URLSearchParams: 'readonly',
          localStorage: 'readonly',
          sessionStorage: 'readonly',
          document: 'readonly',
          window: 'readonly',
          process: 'readonly',
          performance: 'readonly',
          atob: 'readonly',
          btoa: 'readonly',
          encodeURI: 'readonly',
          encodeURIComponent: 'readonly',
          decodeURI: 'readonly',
          decodeURIComponent: 'readonly',
          Intl: 'readonly',
          Reflect: 'readonly',
          Proxy: 'readonly',
          Map: 'readonly',
          Set: 'readonly',
          WeakMap: 'readonly',
          WeakSet: 'readonly',
          Symbol: 'readonly',
          Promise: 'readonly',
          Generator: 'readonly',
          AsyncGenerator: 'readonly',
          WebAssembly: 'readonly',
          Atomics: 'readonly',
          SharedArrayBuffer: 'readonly',
          BigInt: 'readonly',
          FinalizationRegistry: 'readonly',
          WeakRef: 'readonly',
          // Next.js API globals
          Request: 'readonly',
          Response: 'readonly',
          NextRequest: 'readonly',
          NextResponse: 'readonly',
          request: 'readonly',
        },
      },
    },
    plugins: {
      '@typescript-eslint': tseslint,
    },
    rules: {
      // Relaxed rules for v2 APIs and enterprise features
      '@typescript-eslint/no-unused-vars': 'warn',
      '@typescript-eslint/no-explicit-any': 'warn',
      '@typescript-eslint/explicit-function-return-type': 'off',
      '@typescript-eslint/no-non-null-assertion': 'warn',
      'no-unused-vars': 'warn',
      'no-undef': 'warn',
      'no-console': 'warn',
      'prefer-const': 'warn',
      'no-var': 'error',
      'no-unreachable': 'error',
      'no-case-declarations': 'error',
      'no-fallthrough': 'warn',
      'eqeqeq': 'error',
      'curly': 'warn',
      'no-eval': 'error',
      'no-implied-eval': 'error',
      'no-new-func': 'warn',
      'no-script-url': 'error',
      'no-iterator': 'warn',
      'no-proto': 'error',
      'no-with': 'error',
      'no-shadow': 'warn',
      'no-shadow-restricted-names': 'error',
      'no-new': 'warn',
      'no-return-await': 'warn',
      'no-async-promise-executor': 'warn',
      'no-await-in-loop': 'warn',
      'no-mixed-spaces-and-tabs': 'error',
      'no-multiple-empty-lines': 'warn',
      'no-trailing-spaces': 'warn',
      'no-mixed-spaces-and-tabs': 'error',
      'space-infix-ops': 'warn',
      'comma-spacing': 'warn',
      'comma-dangle': 'warn',
      'semi': 'warn',
      'quotes': ['warn', 'single'],
      'jsx-quotes': 'warn',
      'key-spacing': 'warn',
      'keyword-spacing': 'warn',
      'space-before-blocks': 'warn',
      'brace-style': 'warn',
      'max-len': 'warn',
      'max-lines': 'off',
      'max-lines-per-function': 'off',
      'max-depth': 'warn',
      'max-params': 'warn',
      'max-statements': 'off',
      'complexity': 'warn',
      'no-warning-comments': 'off',
      'capitalized-comments': 'off',
      'require-jsdoc': 'off',
    },
  },
  {
    files: ['src/lib/v2/**/*.{ts,tsx}'],
    rules: {
      // Even more relaxed rules for v2 library files
      '@typescript-eslint/no-unused-vars': 'warn',
      '@typescript-eslint/no-explicit-any': 'off',
      'no-unused-vars': 'warn',
      'no-console': 'off',
      'no-undef': 'off',
      'no-case-declarations': 'warn',
      'no-unreachable': 'warn',
    },
  },
  {
    files: ['src/components/revitalized-ui/**/*.{jsx,tsx}'],
    rules: {
      // Special rules for revitalized UI components
      'react/react-in-jsx-scope': 'off',
      'react/jsx-uses-react': 'off',
      'react/jsx-uses-vars': 'off',
      'no-undef': 'warn',
      'no-console': 'warn',
      'no-case-declarations': 'warn',
    },
  },
  prettier,
];