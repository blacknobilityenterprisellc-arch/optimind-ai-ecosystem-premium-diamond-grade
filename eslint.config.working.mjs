// Working ESLint configuration for issue identification
import js from '@eslint/js';
import typescriptEslintParser from '@typescript-eslint/parser';

export default [
  js.configs.recommended,
  {
    files: ['**/*.{js,ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2022,
      sourceType: 'module',
      parser: typescriptEslintParser,
      parserOptions: {
        ecmaFeatures: {
          jsx: true,
        },
        project: './tsconfig.json',
        tsconfigRootDir: process.cwd(),
      },
      globals: {
        console: 'readonly',
        process: 'readonly',
        Buffer: 'readonly',
        __dirname: 'readonly',
        __filename: 'readonly',
        global: 'readonly',
        module: 'readonly',
        require: 'readonly',
        exports: 'readonly',
        window: 'readonly',
        document: 'readonly',
        setTimeout: 'readonly',
        clearTimeout: 'readonly',
        setInterval: 'readonly',
        clearInterval: 'readonly',
        URL: 'readonly',
        URLSearchParams: 'readonly',
        Blob: 'readonly',
        fetch: 'readonly',
        Headers: 'readonly',
        Request: 'readonly',
        Response: 'readonly',
        TextDecoder: 'readonly',
        TextEncoder: 'readonly',
        AbortController: 'readonly',
        Event: 'readonly',
        EventTarget: 'readonly',
        CustomEvent: 'readonly',
        DOMException: 'readonly',
        FormData: 'readonly',
        WebSocket: 'readonly',
        XMLHttpRequest: 'readonly',
        NodeJS: 'readonly',
        jest: 'readonly',
        describe: 'readonly',
        test: 'readonly',
        expect: 'readonly',
        beforeAll: 'readonly',
        afterAll: 'readonly',
        beforeEach: 'readonly',
        afterEach: 'readonly',
      },
    },
    rules: {
      // Basic rules that are commonly problematic
      'no-unused-vars': 'warn',
      'no-undef': 'error',
      'no-console': 'warn',
      'no-debugger': 'error',
      'no-var': 'error',
      'prefer-const': 'warn',
      
      // Security rules
      'no-eval': 'error',
      'no-implied-eval': 'error',
      'no-new-func': 'error',
      'no-script-url': 'error',
      
      // Code quality
      'no-duplicate-imports': 'error',
      'no-redeclare': 'error',
      'no-self-assign': 'error',
      'no-self-compare': 'error',
      'no-sequences': 'error',
      'no-throw-literal': 'error',
      'no-unexpected-multiline': 'error',
      'no-unreachable': 'error',
      'no-useless-escape': 'error',
      'no-with': 'error',
      
      // Best practices
      'array-callback-return': 'warn',
      'block-scoped-var': 'error',
      'curly': 'warn',
      'default-case': 'warn',
      'dot-notation': 'warn',
      'eqeqeq': 'warn',
      'guard-for-in': 'warn',
      'no-alert': 'warn',
      'no-caller': 'error',
      'no-case-declarations': 'error',
      'no-empty': ['warn', { 'allowEmptyCatch': true }],
      'no-empty-function': 'warn',
      'no-extend-native': 'error',
      'no-extra-bind': 'warn',
      'no-fallthrough': 'error',
      'no-floating-decimal': 'warn',
      'no-global-assign': 'error',
      'no-implicit-globals': 'error',
      'no-iterator': 'warn',
      'no-labels': 'error',
      'no-lone-blocks': 'warn',
      'no-loop-func': 'warn',
      'no-multi-spaces': 'warn',
      'no-multi-str': 'error',
      'no-new': 'warn',
      'no-octal': 'error',
      'no-octal-escape': 'error',
      'no-proto': 'error',
      'no-restricted-properties': 'warn',
      'no-return-assign': 'error',
      'no-undef-init': 'warn',
      'no-unmodified-loop-condition': 'warn',
      'no-useless-call': 'warn',
      'no-useless-concat': 'warn',
      'no-useless-return': 'warn',
      'no-void': 'error',
      'radix': 'warn',
      'yoda': 'warn',
    },
  },
  {
    ignores: [
      'node_modules/**',
      '.next/**',
      'dist/**',
      'build/**',
      'coverage/**',
      '*.min.js',
      'public/**',
      'prisma/migrations/**',
      'database_backups/**',
      '*.backup.*',
      '*.log',
      '.git/**',
    ],
  },
];