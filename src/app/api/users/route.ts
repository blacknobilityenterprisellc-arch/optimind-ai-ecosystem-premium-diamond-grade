import type { Request } from 'next/server';\nimport { NextResponse } from 'next/server';\nimport { withRateLimit, standardRateLimit } from '@/lib/api-rate-limit-middleware';\n\n// Apply rate limiting to GET endpoint\nexport const GET = withRateLimit(async (request: Request) => {\n  try {\n    const { searchParams } = new URL(request.url);\n    const page = Number.parseInt(searchParams.get('page') || '1');\n    const limit = Number.parseInt(searchParams.get('limit') || '10');\n\n    // Mock users data\n    const users = [\n      {\n        id: '1',\n        email: 'admin@optimind.ai',\n        name: 'Admin User',\n        role: 'ADMIN',\n        isActive: true,\n        createdAt: new Date().toISOString(),\n      },\n      {\n        id: '2',\n        email: 'user@example.com',\n        name: 'Test User',\n        role: 'USER',\n        isActive: true,\n        createdAt: new Date().toISOString(),\n      },\n    ];\n\n    return NextResponse.json({\n      users,\n      pagination: {\n        page,\n        limit,\n        total: users.length,\n        totalPages: Math.ceil(users.length / limit),\n      },\n    });\n  } catch (error: unknown) {\n    console.error('Users API error:', error);\n    return NextResponse.json({ error: error.message || 'Internal server error' }, { status: 500 });\n  }\n}, standardRateLimit);\n\n// Apply stricter rate limiting to POST endpoint (user creation)\nexport const POST = withRateLimit(async (request: Request) => {\n  try {\n    const body = await request.json();\n    const { email, name, role } = body;\n\n    const newUser = {\n      id: Math.random().toString(36).slice(2, 11),\n      email,\n      name,\n      role: role || 'USER',\n      isActive: true,\n      createdAt: new Date().toISOString(),\n    };\n\n    return NextResponse.json(newUser);\n  } catch (error: unknown) {\n    console.error('User creation error:', error);\n    return NextResponse.json({ error: error.message || 'Failed to create user' }, { status: 500 });\n  }\n}, standardRateLimit);