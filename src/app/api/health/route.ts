import type { Request } from 'next/server';\nimport { NextResponse } from 'next/server';\nimport { withRateLimit, relaxedRateLimit } from '@/lib/api-rate-limit-middleware';\n\n// Health status constants\nconst HEALTH_STATUS = {\n  HEALTHY: 'healthy' as const,\n  DEGRADED: 'degraded' as const,\n  UNHEALTHY: 'unhealthy' as const,\n} as const;\n\n// Health thresholds\nconst HEALTH_THRESHOLDS = {\n  UPTIME_TARGET: 99.9,\n  MAX_RESPONSE_TIME: 100,\n  WARNING_CPU_THRESHOLD: 70,\n  WARNING_MEMORY_THRESHOLD: 80,\n  WARNING_DISK_THRESHOLD: 85,\n} as const;\n\ninterface ServiceHealth {\n  database: string;\n  aiModels: string;\n  api: string;\n  storage: string;\n}\n\ninterface SystemMetrics {\n  cpu: number;\n  memory: number;\n  disk: number;\n  network: number;\n}\n\ninterface HealthAlert {\n  id: string;\n  type: string;\n  title: string;\n  description: string;\n  timestamp: string;\n}\n\ninterface HealthData {\n  status: string;\n  timestamp: string;\n  uptime: string;\n  responseTime: number;\n  services: ServiceHealth;\n  alerts: HealthAlert[];\n  metrics: SystemMetrics;\n  version: string;\n  environment: string;\n}\n\n/**\n * Creates default health alerts for the system\n */\nfunction createHealthAlerts(): HealthAlert[] {\n  return [\n    {\n      id: '1',\n      type: 'success',\n      title: 'System Performance Optimized',\n      description: 'All systems are running at peak efficiency',\n      timestamp: '5 minutes ago',\n    },\n    {\n      id: '2',\n      type: 'info',\n      title: 'New Features Available',\n      description: 'Check out the latest AI optimization tools',\n      timestamp: '1 hour ago',\n    },\n    {\n      id: '3',\n      type: 'warning',\n      title: 'API Rate Limit Approaching',\n      description: 'Consider upgrading your plan for higher limits',\n      timestamp: '3 hours ago',\n    },\n  ];\n}\n\n/**\n * Generates system metrics with default values\n */\nfunction generateSystemMetrics(): SystemMetrics {\n  return {\n    cpu: 45,\n    memory: 62,\n    disk: 78,\n    network: 34,\n  };\n}\n\n/**\n * Creates service health status object\n */\nfunction createServiceHealth(): ServiceHealth {\n  return {\n    database: HEALTH_STATUS.HEALTHY,\n    aiModels: HEALTH_STATUS.HEALTHY,\n    api: HEALTH_STATUS.HEALTHY,\n    storage: HEALTH_STATUS.HEALTHY,\n  };\n}\n\n/**\n * Builds comprehensive health data object\n */\nfunction buildHealthData(): HealthData {\n  return {\n    status: HEALTH_STATUS.HEALTHY,\n    timestamp: new Date().toISOString(),\n    uptime: `${HEALTH_THRESHOLDS.UPTIME_TARGET}%`,\n    responseTime: 98,\n    services: createServiceHealth(),\n    alerts: createHealthAlerts(),\n    metrics: generateSystemMetrics(),\n    version: '1.0.0',\n    environment: process.env.NODE_ENV || 'development',\n  };\n}\n\n/**\n * Handles health check errors with proper response\n */\nfunction handleHealthError(error: unknown): NextResponse {\n  console.error('Error fetching health data:', error);\n  return NextResponse.json({ error: 'Failed to fetch health data' }, { status: 500 });\n}\n\n// Apply rate limiting with relaxed limits for health endpoint\nexport const GET = withRateLimit(async (request: Request) => {\n  try {\n    const healthData = buildHealthData();\n    return NextResponse.json(healthData);\n  } catch (error) {\n    return handleHealthError(error);\n  }\n}, relaxedRateLimit);