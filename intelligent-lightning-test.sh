#!/bin/bash

# ‚ö° OptiMind AI Ecosystem - Intelligent Lightning Test
# Premium Diamond Grade - Auto-detects environment and runs comprehensive tests

echo "ü§ñ OptiMind AI Ecosystem - Intelligent Lightning Test"
echo "===================================================="
echo "‚è±Ô∏è  Timeout: 30 seconds maximum"
echo ""

START_TIME=$(date +%s)

# Source environment variables if .env exists
if [ -f ".env" ]; then
    echo "üìã Loading environment configuration..."
    export $(cat .env | grep -v '^#' | xargs)
    echo "‚úÖ Environment loaded successfully"
else
    echo "‚ö†Ô∏è  No .env file found - using defaults"
fi

# Enhanced health check function
check_component() {
    local name="$1"
    local check_command="$2"
    local expected_result="${3:-0}"
    
    echo -n "üîç $name... "
    
    if timeout 5s bash -c "$check_command" >/dev/null 2>&1; then
        echo "‚úÖ PASS"
        return 0
    else
        echo "‚ùå FAIL"
        return 1
    fi
}

# Component checks
echo "üöÄ Starting Intelligent Component Analysis..."
echo ""

PASSED=0
TOTAL=0

# File System Check
((TOTAL++))
if [ -w "." ]; then
    echo "‚úÖ File System: WRITABLE"
    ((PASSED++))
else
    echo "‚ùå File System: NOT WRITABLE"
fi

# Environment Variables Check
echo ""
echo "üîß Environment Variables:"
((TOTAL++))
if [ -n "$NODE_ENV" ]; then
    echo "‚úÖ NODE_ENV: $NODE_ENV"
    ((PASSED++))
else
    echo "‚ùå NODE_ENV: NOT SET"
fi

((TOTAL++))
if [ -n "$PORT" ]; then
    echo "‚úÖ PORT: $PORT"
    ((PASSED++))
else
    echo "‚ùå PORT: NOT SET"
fi

((TOTAL++))
if [ -n "$DATABASE_URL" ]; then
    echo "‚úÖ DATABASE_URL: SET"
    ((PASSED++))
else
    echo "‚ùå DATABASE_URL: NOT SET"
fi

((TOTAL++))
if [ -n "$ZAI_API_KEY" ]; then
    echo "‚úÖ ZAI_API_KEY: SET"
    ((PASSED++))
else
    echo "‚ùå ZAI_API_KEY: NOT SET"
fi

# Database Check
echo ""
echo "üóÑÔ∏è Database Status:"
((TOTAL++))
if [ -f "prisma/dev.db" ]; then
    DB_SIZE=$(du -h prisma/dev.db | cut -f1)
    echo "‚úÖ Database File: EXISTS ($DB_SIZE)"
    ((PASSED++))
else
    echo "‚ùå Database File: MISSING"
fi

# Dependencies Check
echo ""
echo "üì¶ Dependencies Status:"
((TOTAL++))
if [ -d "node_modules" ]; then
    PACKAGE_COUNT=$(find node_modules -name "package.json" | wc -l)
    echo "‚úÖ Node Modules: EXISTS ($PACKAGE_COUNT packages)"
    ((PASSED++))
else
    echo "‚ùå Node Modules: MISSING"
fi

((TOTAL++))
if [ -f "node_modules/next/package.json" ]; then
    NEXT_VERSION=$(node -p "require('./node_modules/next/package.json').version" 2>/dev/null || echo "UNKNOWN")
    echo "‚úÖ Next.js: INSTALLED ($NEXT_VERSION)"
    ((PASSED++))
else
    echo "‚ùå Next.js: NOT INSTALLED"
fi

((TOTAL++))
if [ -f "node_modules/@prisma/client/package.json" ]; then
    PRISMA_VERSION=$(node -p "require('./node_modules/@prisma/client/package.json').version" 2>/dev/null || echo "UNKNOWN")
    echo "‚úÖ Prisma Client: INSTALLED ($PRISMA_VERSION)"
    ((PASSED++))
else
    echo "‚ùå Prisma Client: NOT INSTALLED"
fi

# Git Status
echo ""
echo "üìù Git Repository:"
((TOTAL++))
if [ -d ".git" ]; then
    echo "‚úÖ Git Repository: DETECTED"
    ((PASSED++))
    
    GIT_STATUS=$(git status --porcelain 2>/dev/null | wc -l)
    if [ "$GIT_STATUS" -eq 0 ]; then
        echo "‚úÖ Git Status: CLEAN"
    else
        echo "‚ö†Ô∏è  Git Status: $GIT_STATUS uncommitted files"
    fi
    
    if git remote get-url origin >/dev/null 2>&1; then
        echo "‚úÖ Git Remote: CONNECTED"
    else
        echo "‚ùå Git Remote: NOT CONFIGURED"
    fi
else
    echo "‚ùå Git Repository: NOT DETECTED"
fi

# AI Services Check
echo ""
echo "ü§ñ AI Services Status:"
((TOTAL++))
if command -v node >/dev/null 2>&1; then
    NODE_VERSION=$(node --version)
    echo "‚úÖ Node.js: $NODE_VERSION"
    ((PASSED++))
else
    echo "‚ùå Node.js: NOT AVAILABLE"
fi

# Calculate score
SCORE=$((PASSED * 100 / TOTAL))
END_TIME=$(date +%s)
DURATION=$((END_TIME - START_TIME))

echo ""
echo "üéØ INTELLIGENT LIGHTNING TEST RESULTS"
echo "===================================="
echo "üìä Score: $SCORE% ($PASSED/$TOTAL components)"
echo "‚è±Ô∏è  Duration: ${DURATION} seconds"
echo "üïê Timeout: 30 seconds"

if [ $SCORE -ge 90 ]; then
    echo "üéâ Status: EXCELLENT - System is ready for production"
    EXIT_CODE=0
elif [ $SCORE -ge 70 ]; then
    echo "‚úÖ Status: GOOD - System is functional"
    EXIT_CODE=0
elif [ $SCORE -ge 50 ]; then
    echo "‚ö†Ô∏è  Status: FAIR - System needs attention"
    EXIT_CODE=1
else
    echo "‚ùå Status: POOR - System requires immediate attention"
    EXIT_CODE=2
fi

echo ""
echo "üöÄ Next Steps:"
if [ $SCORE -ge 70 ]; then
    echo "   ‚Ä¢ Run 'npm run dev' to start development server"
    echo "   ‚Ä¢ System is ready for OptiMind AI Ecosystem operations"
else
    echo "   ‚Ä¢ Run './auto-environment-setup.sh' to fix issues"
    echo "   ‚Ä¢ Check failed components above"
fi

echo ""
echo "‚ö° Intelligent Lightning Test Complete!"

exit $EXIT_CODE